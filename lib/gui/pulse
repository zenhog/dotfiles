#!/usr/bin/env bash

KEY=i
MOD='S-M'
ICON=Û∞ê∞

HORIZONTAL=1

init() {
	local mode="$(get_opt mode)"
	[[ -z "$mode" ]] && set_opt mode sinks
}

label() {
	local mode="$(get_opt mode)"

	echo " mode: $mode "
	widget playback timeout
	widget capture timeout
}

BINDS[rotate_mode]=alt-t
HOOKS[rotate_mode]=clear
DESCS[rotate_mode]='Rotate mode'
rotate_mode() {
	local mode="$(get_opt mode)"

	case "$mode" in
	sinks) set_opt mode sources ;;
	sources) set_opt mode sink-inputs ;;
	sink-inputs) set_opt mode source-outputs ;;
	source-outputs) set_opt mode sinks ;;
	esac
}

view() {
	local index

	read -r index _ <<<"$1"

	local mode="$(get_opt mode)"

	set_opt mode "$mode"

	pactl -f json list "$mode" | jq ".[] | select(.index == ${index})" | yq -yC |
		bat -p --force-colorization --language=yaml
}

BINDS[inc]=alt-k
DESCS[inc]='Volume Up'
inc() {
	local mode="$(get_opt mode)"

	set_opt mode "$mode"

	ctl "${mode%s}" inc "$@"
}

BINDS[dec]=alt-j
DESCS[dec]='Volume Down'
dec() {
	local mode="$(get_opt mode)"

	set_opt mode "$mode"

	ctl "${mode%s}" dec "$@"
}

BINDS[def]=Enter
HOOKS[def]=clear
DESCS[def]='Set Default'
def() {
	local mode="$(get_opt mode)"

	set_opt mode "$mode"

	case "$mode" in
	sinks | sources)
		ctl "${mode%s}" default "$@"
		;;
	sink-inputs | source-outputs)
		local choice choices index

		read -r index _ <<<"$1"

		readarray -t choices < <(ctl "${mode%-inputs}" move)

		read -r choice _ < <(choice "${choices[@]}")

		pactl move-"${mode%s}" "$index" "$choice"
		;;
	esac
}

ctl() {
	local index vol
	local mode="$1"
	local ctl="$2"

	shift 2

	read -r index _ <<<"$1"

	shift

	if [[ -z "$index" || "$index" == default ]]; then
		case "$mode" in
		sink)
			read -r dsink < <(pactl get-default-sink)

			read -r index < <(pactl -f json list sinks | jq -r \
				".[] | select (.name == \"$dsink\") | .index")

			;;
		source)
			read -r dsource < <(pactl get-default-source)

			read -r index < <(pactl -f json list sources | jq -r \
				".[] | select (.name == \"$dsource\") | .index")
			;;
		esac
	fi

	case "$ctl" in
	inc) ctl='+' ;;
	dec) ctl='-' ;;
	esac

	case "$ctl" in
	mute)
		pactl set-"$mode"-mute "$index" toggle
		;;
	setvol)
		vol="$1"
		pactl set-"$mode"-volume "$index" "$vol"%
		;;
	getmute)
		pactl -f json list "${mode}s" | jq -r \
			".[] | select (.index == $index) | .mute"
		;;
	getvol)
		pactl -f json list "${mode}s" | jq -r \
			".[] | select (.index == $index) | .volume.\"front-left\".value_percent"
		;;
	default)
		pactl set-default-"$mode" "$index"
		;;
	move)
		local indices descriptions

		readarray -t indices < <(pactl -f json list "${mode}s" |
			jq -r ".[] | .index")

		readarray -t descriptions < <(pactl -f json list "${mode}s" |
			jq -r ".[] | .description")

		for i in "${!indices[@]}"; do
			printf "%s %s\n" "${indices[$i]}" "${descriptions[$i]}"
		done
		;;
	ports) ;;
	cards) ;;
	*)
		pactl set-"$mode"-volume "$index" "${ctl}5%"
		;;
	esac

}

BINDS[togglemute]=alt-m
DESCS[togglemute]='Toggle Mute'
togglemute() {
	local index

	read -r index _ <<<"$1"

	local mode="$(get_opt mode)"

	set_opt mode "$mode"
	ctl "${mode%s}" mute "$@"
}

# edit conn
# show conn
# add wifi
# mod sublist
#   pass
#   name
#   forget?

# create aec-sink-source
# create drc-sink-source
# create surround-sink
# create combine-sink-all
# create monitored-sink?

OPTS+=(--with-nth 2..)
list() {
	# format: INDEX, SINK/SOURCE/INPUT/OUTPUT/PORT, NAME, MUTE, VOL, DEFAULT

	local mode="${1:-$(get_opt mode)}"

	set_opt mode "$mode"
	entries "$mode"
}

entries() {
	local kind="$1"
	local json="$(pactl -f json list "$kind")"

	local indices descs lvols rvols mutes dsource dsink default

	read -r dsink < <(pactl get-default-sink)
	read -r dsource < <(pactl get-default-source)

	readarray -t indices < <(jq -r '.[] | (.index|tostring)' <<<"$json")

	case "$kind" in
	sinks | sources)
		readarray -t names < <(jq -r '.[] | .name' <<<"$json")
		readarray -t descs < <(jq -r '.[] | .description' <<<"$json")
		readarray -t states < <(jq -r '.[] | .state' <<<"$json")
		readarray -t lvols < \
			<(jq -r '.[] | .volume."front-left".value_percent' <<<"$json")
		readarray -t rvols < \
			<(jq -r '.[] | .volume."front-right".value_percent' <<<"$json")
		readarray -t mutes < <(jq -r '.[] | .mute' <<<"$json")

		mutes=("${mutes[@]/true/M}")
		mutes=("${mutes[@]/false/-}")

		unset default

		case "$kind" in
		sinks)
			default="$dsink"
			;;
		sources)
			default="$dsource"
			;;
		esac

		for i in "${!indices[@]}"; do
			read -r line < <(
				printf "%s%s[%s:%s]%s%s%s%s" \
					"${indices[$i]}" "$iSEP" \
					"${lvols[$i]}" "${mutes[$i]}" "$iSEP" \
					"${descs[$i]}" "$iSEP" \
					"${states[$i]}"
			)
			if [[ "${names[$i]}" == "$default" ]]; then
				printf "%s\n" "$(colorize green "$line")"
			else
				printf "%s\n" "$line"
			fi
		done | column -t -s "$iSEP"
		;;
	sink-inputs | source-outputs)
		readarray -t descs < <(jq -r '.[] | .properties."media.name"' <<<"$json")

		readarray -t names < \
			<(jq -r '.[] | .properties."application.name"' <<<"$json")

		readarray -t lvols < \
			<(jq -r '.[] | .volume."front-left".value_percent' <<<"$json")

		readarray -t rvols < \
			<(jq -r '.[] | .volume."front-right".value_percent' <<<"$json")
		readarray -t mutes < <(jq -r '.[] | .mute' <<<"$json")

		readarray -t puts < <(jq -r ".[] | .${kind%-*}" <<<"$json")

		local jsoff

		IFS= read -r -d '' jsoff < <(pactl -f json list "${kind%-*}s")

		for i in "${!puts[@]}"; do
			puts[$i]="$(jq -r ".[] | select(.index == ${puts[$i]}) | .description" \
				<<<"$jsoff")"
		done

		mutes=("${mutes[@]/true/M}")
		mutes=("${mutes[@]/false/-}")

		for i in "${!indices[@]}"; do
			printf "%s%s[%s:%s]%s%s%s(%s)\n" \
				"${indices[$i]}" "$iSEP" \
				"${lvols[$i]}" "${mutes[$i]}" "$iSEP" \
				"${names[$i]}" "$iSEP" \
				"${puts[$i]}"
		done | column -t -s "$iSEP"
		;;
	esac
}
