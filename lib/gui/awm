#!/usr/bin/env bash

KEY=t
MOD='S-M'
ICON=î¬£
COLOR=yellow

HORIZONTAL=1

NOWRAP=1

OPTS+=(--with-nth 3.. --header-lines=1)
list() {
	awesome-client "
    require('awful')
    local r = '\n'
    for _, c in ipairs(client.get()) do
      r = r .. string.format('%s\x01%d\x01%s\x01%s\x01%s\x01[%s]\n',
        string.format('0x%08x', c.window),
          c.pid, c.profile, c.class, c.instance, c.name)
    end
    return r
  " | sed -r '1d;$d' | column -t -s "$iSEP" -N \
    WID,PID,PROFILE,CLASS,INSTANCE,NAME
}

view() {
	local window
	read -r window _ <<<"$1"
	properties @window="$window"
}

BINDS[open]=enter
HOOKS[open]=accept
DESCS[open]='Raise window entry'
open() {
	local window

	read -r window _ <<<"$1"
	raise @window="$window"
}

BINDS[close]=alt-d
DESCS[close]='Close window entry'
close() {
	local window

	read -r window _ <<<"$1"
	winkill @window="$window"
}

raise() {
	local lhs conds success
	readarray -t lhs < <(parse lhs "$@")

	IFS= read -r conds < <(cmdfmt conds "${lhs[@]}")

	[[ -z "$mode" ]] && local mode=fg

	read -r success < <(
		awesome-client <<EOF
    require('awful')
    for _, c in ipairs(client.get()) do
      if ${conds} then
        c.hidden = false
        c.minimized = false
        c:raise()
        if not (c.above and c.sticky) and '${mode}' == 'fg' then
          c.first_tag:view_only()
        end
        client.focus = c
        return true
      end
    end
    return false
EOF
	)

	[[ "boolean true" == "$success" ]]
}

winkill() {
	local lhs conds success
	readarray -t lhs < <(parse lhs "$@")

	IFS= read -r conds < <(cmdfmt conds "${lhs[@]}")

	read -r success < <(
		awesome-client <<EOF
    require('awful')
    for _, c in ipairs(client.get()) do
      if ${conds} then
        c:kill()
        return true
      end
    end
    return false
EOF
	)

	[[ "boolean true" == "$success" ]]
}

timeout() {
	for widget in "$@"; do
		awesome-client <<EOF
      require('widgets').timers.${widget}:emit_signal('timeout')
EOF
	done
}

properties() {
	getattributes "$@" -- \
		window name type pid role icon_name class instance minimized maximized \
		ontop above below sticky urgent hidden fullscreen opacity transparency \
    startup_id maximized_horizontal maximized_vertical alticon mutex
}

runonce() {
	local mode="$1" lhs rhs conds

	shift

	readarray -t lhs < <(parse lhs "$@")
	readarray -t rhs < <(parse rhs "$@")

	case "$mode" in
	fg)
		raise "${lhs[@]}" || spawn fg "${lhs[@]}" -- "${rhs[@]}"
		;;
	bg)
		exists "${lhs[@]}" || spawn bg "${lhs[@]}" -- "${rhs[@]}"
		;;
	esac
}

strfmt() {
	local attr="$1"

	[[ "$attr" == *=* ]] || return

	local lhs="${attr%%=*}"
	local rhs="${attr#*=}"

	if [[ '@' == "${lhs:0:1}" ]]; then
		lhs="${lhs:1}"
	else
		rhs="'${rhs}'"
	fi

	echo "$lhs" "$rhs"
}

cmdfmt() {
	local fmt str type="${1?}"

	case "$type" in
	conds)
		fmt="c.%s == %s"
		;;
	attrs)
		fmt=" %s = %s "
		;;
	props)
		fmt=" '%s' "
		;;
	*)
		return 1
		;;
	esac

	shift

	for attr in "$@"; do
		local lhs rhs

		read -r lhs rhs < <(strfmt "$attr")

		if [[ -z "$lhs" ]]; then
			str+=("$(printf "$fmt" "$attr")")
			continue
		fi

		str+=("$(printf "$fmt" "$lhs" "$rhs")")
	done

	case "$type" in
	conds)
		(
			IFS=,
			printf "%s" "${str[*]}"
		) | sed -r 's/,/ and /g'
		;;
	props | attrs)
		(
			IFS=,
      # (( ${#str[*]} )) && printf '{%s}' "${str[*]}" || printf '{}'
      printf '{%s}' "${str[*]}"
		)
		;;
	esac
}

getattributes() {
	local lhs rhs conds props output

	readarray -t lhs < <(parse lhs "$@")
	readarray -t rhs < <(parse rhs "$@")

	IFS= read -r conds < <(cmdfmt conds "${lhs[@]}")
	read -r props < <(cmdfmt props "${rhs[@]}")

	IFS= read -r -d '' output < <(
		awesome-client <<EOF | sed -r '1d;$d'
    require('awful')
    local r = '\n'
    for _, c in ipairs(client.get()) do
      if ${conds} then
        for _, attr in ipairs(${props}) do
          local fmt
          if type(c[attr]) == string then
            fmt = '%s: "%s"\n'
          else
            fmt = '%s: %s\n'
          end
          r = r .. string.format(fmt, attr, tostring(c[attr]))
        end
      end
    end
    return r
EOF
	)

	echo -n "$output" | column -t
	[[ -n "$output" ]]
}

exists() {
	mute getattributes "$@" -- window
}

waitfor() {
	local totaltime=0
	until exists "$@" || ((totaltime > 30)); do
		sleep 0.1
		((totaltime += 1))
	done
}

setattributes() {
	local lhs rhs conds props

	readarray -t lhs < <(parse lhs "$@")
	readarray -t rhs < <(parse rhs "$@")

	IFS= read -r conds < <(cmdfmt conds "${lhs[@]}")
	read -r props < <(cmdfmt props "${rhs[@]}")

	awesome-client <<EOF
    require('awful')
    for _, c in ipairs(client.get()) do
      if ${conds} then
        $(
		for attr in "${rhs[@]}"; do
			local lhs rhs

			read -r lhs rhs < <(strfmt "$attr")

			[[ -n "$lhs" ]] && printf "c.%s = %s\n" "$lhs" "$rhs"
		done
	)
      end
    end
EOF

	rhs=("${rhs[@]%%=*}")

	getattributes "${lhs[@]}" -- "${rhs[@]#@}"
}

spawn() {
	local mode="$1"

	shift

	local lhs rhs attrs pid

	readarray -t lhs < <(parse lhs "$@")
	readarray -t rhs < <(parse rhs "$@")

  [[ -z "$lhs" ]] && unset lhs

  local args=("${rhs[@]:1}")

	read -r attrs < <(cmdfmt attrs "${lhs[@]}")

	read -r pid < <(
		awesome-client <<EOF | sed -r 's/[^0-9]//g'
    local s = "${rhs[0]} ${args[@]@Q}"
    return require('awful').spawn(s, ${attrs})
EOF
	)

	[[ "$pid" =~ [0-9]+ ]] || return
	[[ "$rhs" == i3lock ]] && return

	if [[ -n "$lhs" ]]; then
		gui awm waitfor "${lhs[@]}"
		[[ "$mode" == fg ]] && raise "${lhs[@]}"
	fi
}
