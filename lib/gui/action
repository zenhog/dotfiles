#!/usr/bin/env bash

KEY=x
MOD='S-M'
ICON=ï€‘

function view() {
  declare -f "action:$1"
}

function list() {
  while read -r _ _ f _; do
    [[ "$f" =~ action:.* ]] && printf "%s\n" "${f#action:}"
  done < <(declare -F)
}

BINDS[open]=enter
HOOKS[open]=accept
DESCS[open]='Execute entry'
function open() {
  action:$1
}

function action:poweroff() {
  sudo poweroff
}

function action:reboot() {
  sudo reboot
}

function action:suspend() {
  action:screenlock
  sudo zzz
}

function action:screenlock() {
  local image="$HOME/.wallpapers/whysosleepy.png"

  gui awm spawn -- i3lock -nuei "$image"
}

function action:screenshot() {
  local name dir="$HOME/.screenshots"
  mkdir -p "$dir"
  name="$dir/screenshot-$(date "+%F_%T")"-'$wx$h.png'

  scrot -zio -F "$name" && notify "Screen shot!"
}

function action:windowshot() {
  local name dir="$HOME/.screenshots"
  mkdir -p "$dir"
  name="$dir/windowshot-$(date "+%F_%T")"-'$wx$h.png'

  scrot -ziow "$(xdotool getwindowfocus)" -F "$name" && notify "Window shot!"
}

function action:selectshot() {
  local name dir="$HOME/.screenshots"
  mkdir -p "$dir"
  name="$dir/selectshot-$(date "+%F_%T")"-'$wx$h.png'

  scrot -zios -F "$name" && notify "Selection shot!"
}

function action:toggletheme() {
  local current theme
  read -r current < "$HOME/.colorscheme"

  case "$current" in
    dark)  theme=light;;
    *)     theme=dark;;
  esac

  applytheme "$theme"
}

function inittheme() {
  local current theme
  read -r current < "$HOME/.colorscheme"

  case "$current" in
    light)  theme=light;;
    *)     theme=dark;;
  esac

  settheme "$theme"
}


function settheme() {
  local theme="$1"

  # alacritty
  mkdir -p "$HOME/.themes/alacritty"
  ln -vf \
    "$HOME/.config/alacritty/colors.${theme}.toml" \
    "$HOME/.themes/alacritty/colors.toml"

  # lscolors
  mkdir -p "$HOME/.themes/lscolors"
  ln -svf \
    "$HOME/.config/lsd/lscolors/lscolors.${theme}" \
    "$HOME/.themes/lscolors/lscolors"

  # lsd
  mkdir -p "$HOME/.themes/lsd"
  ln -svf \
    "$HOME/.config/lsd/themes/${theme}.yaml" \
    "$HOME/.themes/lsd/colors.yaml"

  # qutebrowser
  mkdir -p "$HOME/.themes/qutebrowser"
  ln -svf \
    "$HOME/.config/qutebrowser/${theme}.py" \
    "$HOME/.themes/qutebrowser/theme.py"

  # tridactyl
  mkdir -p "$HOME/.themes/tridactyl"
  ln -svf \
    "$HOME/.config/tridactyl/themes/custom-${theme}.css" \
    "$HOME/.themes/tridactyl/theme.css"

  # wallpapers
  mkdir -p "$HOME/.themes/wallpapers"
  ln -svf \
    "$HOME/.wallpapers/main.${theme}" \
    "$HOME/.themes/wallpapers/main"

  # write new theme
  echo "$theme" > "$HOME/.colorscheme"
}

function applytheme() {
  local theme="$1"

  settheme "$1"

  for d in /tmp/qutebrowser/instances/*; do
    if gui awm exists profile=qutebrowser; then
      qutebrowser -B "$d" :config-source
    fi
  done

  feh --bg-scale "$HOME/.wallpapers/main"

  # neovim
  local panes
  readarray -t panes < \
    <(tmux list-panes -a -F '#S:#I.#P #{pane_current_command}' | grep 'vim$')

  for p in "${panes[@]}"; do
    local id
    read -r id _ <<< "$p"
    tmux send-keys -t "$id" Escape ":lua vim.opt.bg = '${theme}'" Enter
    tmux send-keys -t "$id" Escape \
      ":lua vim.cmd('colorscheme ' .. vim.g['theme_${theme}'])" Enter
    tmux send-keys -t "$id" Escape \
      ":lua require('lualine').setup({ options = { theme = vim.g.lualine_theme_${theme} } })" Enter
  done

  # tmux
  gui tmux colors
}

function action:mailsync() {
  mailsync
}
