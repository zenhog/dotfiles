#!/usr/bin/env bash

KEY=f
MOD='S-M'
ICON=ó°´½

HORIZONTAL=1
PREVIEW_LABEL_OFFSET=2
RATIO=40%

FIELDS=(uuid state type ifname name bssid ssid prio
  mode signal chan freq rate security)

export S_FIELDS="$(declare -p FIELDS)"

label() {
  info "$1" label
}

BINDS[rescan]=alt-r
DESCS[rescan]='Rescan'
rescan() {
  local devices

  readarray -t devices < <(nmcli -c no -t -f device,type,state device status)

  local ifname type status
  for device in "${devices[@]}"; do
    IFS=: read -r ifname type state <<< "$device"
    [[ "$state" == unmanaged ]] && continue
    [[ "$type" == wifi ]] && sudo nmcli device wifi rescan ifname "$ifname"
  done
}

info() {
  eval "$S_FIELDS"

  eval local "${FIELDS[@]}"

  eval read -r "${FIELDS[@]}" <<< "$1"

  local label="$2"
  local psk

  if [[ "$type" == wifi ]]; then
    IFS=: read -r _ psk < <(sudo nmcli -c no -t -s \
      -f 802-11-wireless-security.psk connection show "$uuid")

    if [[ -n "$label" ]]; then
      echo " [$psk] "
      return
    fi

    val="WIFI:T:$SECURITY;S:$ssid;P:$psk;;"
    qrencode -m1 -tANSI256 "$val"
  fi
}

name() {
  local output statuses ifname type state uuid name prio bssid ssid signal

  readarray -t statuses < <(
    nmcli -c no -t -f DEVICE,TYPE,STATE,CON-UUID,CONNECTION dev status
  )

  for status in "${statuses[@]}"; do
    IFS=: read -r ifname type state uuid name <<< "$status"
    if [[ "$state" == connected ]]; then
      read -r prio < <(
        nmcli -c no -g connection.autoconnect-priority con show "$uuid")
      if [[ "$type" == wifi ]]; then
        read -r ssid < <(nmcli -c no -g 802-11-wireless.ssid con show "$uuid")
        read -r bssid < <(
          nmcli -c no -e no -g 802-11-wireless.bssid con show "$uuid")
        read -r signal < <(
          nmcli -c no -g signal dev wifi list ifname "$ifname" bssid "$bssid")
        output+=("$prio:$type:$ifname:$signal:$ssid")
      else
        output+=("$prio:$type:$ifname::$name")
      fi
    fi
  done

  printf "%s\n" "${output[@]}" | sort -r

}

BINDS[qrcode]=alt-s
HOOKS[qrcode]=qrcode
CALLS[qrcode]='reload-sync(qrcode {} {q})+clear-query+toggle-input'
DESCS[qrcode]='Generate QR Code'
qrcode() {
  local lines

  readarray -t lines < <(info "$1")

  echo
  printf -- "-- -- %s\n" "${lines[@]}"
}

BINDS[del]=alt-d
HOOKS[del]=clear
DESCS[del]='Delete connection'
del() {
	local uuid
  read -r uuid _ <<< "$1"

  sudo nmcli connection delete "$uuid"
}

BINDS[toggle]=tab
HOOKS[toggle]=sclear
DESCS[toggle]='Toggle connection'
toggle() {
	local uuid state

	read -r uuid state _ <<< "$1"

  [[ "$uuid" == -- ]] && return

  case "$state" in
    yes)
      sudo nmcli --wait 4 con down "$uuid"
      ;;
    no)
      sudo nmcli --wait 4 con up "$uuid"
      ;;
  esac

  widget connection timeout
}

BINDS[clone]=alt-m
HOOKS[clone]=sclear
DESCS[clone]='Clone connection'
clone() {
  local uuid newname

  read -r uuid _ <<< "$1"

  [[ "$uuid" == -- ]] && return

  read -r newname < <(input)

  [[ -z "$newname" ]] && return

  sudo nmcli connection clone "$uuid" "$newname"
}

# alt-c: copy BSSID;SSID;PSK;MGMT
# alt-c: copy BSSID
# alt-c: copy PSK
# alt-m: copy PSK
# alt-x: qrencode in the middle of the screen?
# extract BSSID,SSID,

BINDS[add]=enter
HOOKS[add]=sclear
DESCS[add]='Create or modify connection'
add() {
	local uuid state type ifname bssid ssid prio

  read -r uuid state type ifname _ bssid ssid _ <<< "$1"

  if [[ "$uuid" != -- ]]; then
    # toggle "$uuid $state"
    # modify 
    return
  fi

  local -A values

  values[wifi.bssid]="$bssid"
  values[wifi-sec.key-mgmt]=wpa-psk
  values[autoconnect]=yes
  values[connection.autoconnect-priority]=100
  values[save]=yes
  values[ssid]="$ssid"
  values[ifname]="$ifname"
  values[type]=wifi

  local defaults=(
    "+NAME"
    "+PSK"
    "SAVE=yes"
    "PRIO=+100"
    "TYPE=wifi"
    "IFNAME=$ifname"
    "BSSID=$bssid"
    "SSID=$ssid"
    "MGMT=wpa-psk"
  )

  local query entry entries

  IFS= read -r -d '' query < <(printf "%s\n" "${defaults[@]}" | column -t -s=)

  tmux load-buffer -b preview - <<< "$query"

  tmux load-buffer - <<< "$bssid"

  IFS= read -r entry < <(input query="name:")

  local args=("$@")

  eval "set -- $entry"

  entries=("$@")
  set -- "$@"

  unset entry

	tmux delete-buffer -b preview

	for entry in "${entries[@]}"; do
    local lhs rhs
    IFS=: read -r lhs rhs <<< "$entry"
    case "$lhs" in
      prio)
        if [[ "${rhs:0:1}" == - ]]; then
          values[autoconnect]=no
          rhs="${rhs:1}"
        fi
        values[connection.autoconnect-priority]="$rhs"
        ;;
      bssid)
        values[wifi.bssid]="$rhs"
        ;;
      name)
        values[con-name]="$rhs"
        ;;
      mgmt)
        values[wifi-sec.key-mgmt]="$rhs"
        ;;
      psk)
        values[wifi-sec.psk]="$rhs"
        ;;
      *)
        values[$lhs]="$rhs"
        ;;
    esac
	done

  for key in "${!values[@]}"; do
    if [[ "$key" == type ]]; then
      opts=("$key" "${values[$key]}" "${opts[@]}")
    else
      opts+=("$key" "${values[$key]}")
    fi
  done

  sudo nmcli connection add "${opts[@]}"
}

show() {
  eval "$S_FIELDS"
  eval "$S_WIFIS"
  eval "$S_CONNS"

  local kind="$1"
  local line

  case "$kind" in
    conns)
      local -A keys=(
        [connection.uuid]=uuid
        [connection.id]=name
        [connection.type]=type
        [connection.interface-name]=ifname
        [connection.autoconnect]=auto
        [connection.autoconnect-priority]=prio
        [802-11-wireless.ssid]=ssid
        [802-11-wireless.bssid]=bssid
      )

      local fields=("${!keys[@]}")

      local columns=(uuid state type ifname name ssid bssid prio)

      local fmts entries

      readarray -t entries < <(nmcli -t -c no -f UUID,ACTIVE connection show)

      local -A states

      local uuid

      for entry in "${!entries[@]}"; do
        uuid="${entries[$entry]%%:*}"
        states[$uuid]="${entries[$entry]#*:}"
      done

      unset uuid

      local -A values

      local key val lastcol fmts

      readarray -t fmts < <(printf '"${values[%s]:---}"\n' "${FIELDS[@]}")

      while IFS=: read -r key val; do
        if [[ -n "$key" ]]; then
          key="${keys[$key]}"
          values[$key]="$val"
        fi

        lastcol="${#fields[@]}"
        lastcol="$(( lastcol - 1 ))"
        lastcol="${fields[lastcol]}"
        lastcol="${keys[$lastcol]}"

        if [[ "$key" == "$lastcol" ]]; then
          uuid="${values[uuid]}"
          values[state]="${states[$uuid]}"

          values[prio]="${values[auto]/yes/+}${values[prio]}"
          values[prio]="${values[prio]/#no/}"

          values[type]="${values[type]/802-3-ethernet/ether}"
          values[type]="${values[type]/802-11-wireless/wifi}"

          read -r line < <(eval printfmt "${fmts[@]}")

          CONNS[${values[uuid]}]="$line"

          values=()
          unset uuid
        fi
      done < <(
        IFS=,
        nmcli -t -c no -f "${fields[*]}" connection show "${entries[@]%%:*}"
      )
      ;;
    wifis)
      local columns=(
        active device ssid mode signal chan freq rate security bssid)

      local -A values

      eval local "${columns[@]}" ifname
      local type=--

      local -A values

      while eval IFS=: read -r "${columns[@]}"; do
        [[ -z "$ssid" ]] && continue
        read -r bssid < <(eval printf "%b" "$bssid")
        signal="${signal}%"
        ifname="$device"

        readarray -t fmts < <(printf '"${%s:---}"\n' "${FIELDS[@]}")

        read -r line < <(eval printfmt "${fmts[@]}")

        WIFIS[$bssid,$ifname]="$line"
      done < <(
        IFS=,
        nmcli -t -c no -f "${columns[*]}" device wifi list --rescan yes
      )
      ;;
  esac
}

paint() {
  local state="$1" signal="$2"

  [[ -z "$state" ]] && return

  shift 2

  local conn="$*"

  if [[ "$state" == yes ]]; then
    colorize green "$conn"
  elif [[ "$signal" == -- ]]; then
    echo "$conn"
  elif (( signal >= 75 )); then
    colorize cyan "$conn"
  elif (( signal >= 50 )); then
    colorize yellow "$conn"
  elif (( signal >= 25 )); then
    colorize magenta "$conn"
  elif (( signal < 25 )); then
    colorize red "$conn"
  else
    echo "$conn"
  fi

}

OPTS+=(--with-nth 3.. --header-lines=1 --preview-window hidden)
list() {
  eval "$S_CONNS"
  eval "$S_WIFIS"
  eval "$S_FIELDS"

  sudo nmcli connection reload

  declare -A WIFIS
  declare -A CONNS

  local conns wifis

  show conns
  show wifis

  local wifi keys fmts

  readarray -t keys < <(printf "w_%s\n" "${FIELDS[@]}")

  eval local "${FIELDS[@]}"
  eval local "${keys[@]}"

  (
    for conn in "${CONNS[@]}"; do
      eval IFS="$iSEP" read -r "${FIELDS[@]}" <<< "$conn"

      wifi="${WIFIS[${bssid},${ifname}]}"

      if [[ -n "$wifi" ]]; then
        eval IFS="$iSEP" read -r "${keys[@]}" <<< "$wifi"

        mode="$w_mode"
        signal="$w_signal"
        chan="$w_chan"
        freq="$w_freq"
        rate="$w_rate"
        security="$w_security"

        readarray -t fmts < <(printf '"${%s:---}"\n' "${FIELDS[@]}")

        read -r conn < <(eval printfmt "${fmts[@]}")
        WIFIS[${bssid},${ifname}]=
      fi
      paint "$state" "${signal%%%}" "$conn"
    done
    for wifi in "${WIFIS[@]}"; do
      IFS="$iSEP" read -r _ state _ _ _ _ _ _ _ signal _ <<< "$wifi"
      paint "$state" "${signal%%%}" "$wifi"
    done
  ) | sort -t "$iSEP" -k 8 -k 10 -k 4 |
    (IFS=,; column -t -s "$iSEP" -N "${FIELDS[*]^^}" -R PRIO,SIGNAL,CHAN,RATE)

  read -r S_CONNS < <(declare -p CONNS)
  export S_CONNS

  read -r S_WIFIS < <(declare -p WIFIS)
  export S_WIFIS
}
