#!/usr/bin/env bash

KEY=f
MOD='S-M'
ICON=ó°´½

HORIZONTAL=1
PREVIEW_LABEL_OFFSET=2
RATIO=50%

FIELDS=(uuid state type ifname name ssid bssid prio
  mode signal chan freq rate security)

export S_FIELDS="$(declare -p FIELDS)"

label() {
	local mode="$(get_opt mode)"

	echo " mode: $mode "
}

init() {
	set_opt mode connections
}

BINDS[rescan]=alt-r
DESCS[rescan]='Rescan'
reload() {
	sudo nmcli device wifi rescan
}

view() {
  eval "$S_FIELDS"

  eval local "${FIELDS[@]}"

  eval read -r "${FIELDS[@]}" <<< "$1"

  local val psk

  if [[ "$type" == wifi ]]; then
    IFS=: read -r _ psk < <(sudo nmcli -c no -t -s \
      -f 802-11-wireless-security.psk connection show "$uuid")
    echo "Password: $psk"
    val="WIFI:T:$SECURITY;S:$ssid;P:$psk;;"
    qrencode -m1 -l H -tANSI256 "$val"
    # TODO: need fix with uberzug cuz its too big
  fi
}

BINDS[del]=alt-d
HOOKS[del]=clear
DESCS[del]='Delete connection'
del() {
	local uuid
  read -r uuid _ <<< "$1"

  sudo nmcli connection delete "$uuid"
}

  # type: conn/wifi
  # new:
    # ethernet id eth0 prio ipv6?
    # wifi id wlan0 prio ssid psk
    # hotspot
  # connect:
    # wifi id wlan0 prio ssid psk

BINDS[open]=enter
HOOKS[open]=clear
DESCS[open]='Toggle connection or wifi'
open() {
	local mode="$(get_opt mode)"

	local active id

	read -r active id _ <<<"$1"

	case "$mode" in
	connections)
		case "$active" in
		yes) sudo nmcli con down "$id" ;;
		no) sudo nmcli con up "$id" ;;
		esac
		;;
	ssids)
		case "$active" in
		yes) sudo nmcli con down "$id" ;;
		no) sudo nmcli con up "$id" ;;
		esac
		;;
	esac
}

# add: ethernet:xy bssid:EF:
# del
# clone name: ifname:wlan1
# modify name:H

show() {
  eval "$S_FIELDS"
  eval "$S_WIFIS"
  eval "$S_CONNS"

  local kind="$1"
  local line

  case "$kind" in
    conns)
      local -A keys=(
        [connection.uuid]=uuid
        [connection.id]=name
        [connection.type]=type
        [connection.interface-name]=ifname
        [connection.autoconnect]=auto
        [connection.autoconnect-priority]=prio
        [802-11-wireless.ssid]=ssid
        [802-11-wireless.bssid]=bssid
      )

      local fields=("${!keys[@]}")

      local columns=(uuid state type ifname name ssid bssid prio)

      local fmts entries

      readarray -t entries < <(nmcli -t -c no -f UUID,ACTIVE connection show)

      local -A states

      local uuid

      for entry in "${!entries[@]}"; do
        uuid="${entries[$entry]%%:*}"
        states[$uuid]="${entries[$entry]#*:}"
      done

      unset uuid

      local -A values

      local key val lastcol fmts

      readarray -t fmts < <(printf '"${values[%s]:---}"\n' "${FIELDS[@]}")

      while IFS=: read -r key val; do
        if [[ -n "$key" ]]; then
          key="${keys[$key]}"
          values[$key]="$val"
        fi

        lastcol="${#fields[@]}"
        lastcol="$(( lastcol - 1 ))"
        lastcol="${fields[lastcol]}"
        lastcol="${keys[$lastcol]}"

        if [[ "$key" == "$lastcol" ]]; then
          uuid="${values[uuid]}"
          values[state]="${states[$uuid]}"

          values[prio]="${values[auto]/yes/+}${values[prio]}"
          values[prio]="${values[prio]/#no/}"

          values[type]="${values[type]/802-3-ethernet/ether}"
          values[type]="${values[type]/802-11-wireless/wifi}"

          read -r line < <(eval printfmt "${fmts[@]}")

          CONNS[${values[uuid]}]="$line"

          values=()
          unset uuid
        fi
      done < <(
        IFS=,
        nmcli -t -c no -f "${fields[*]}" connection show "${entries[@]%%:*}"
      )
      ;;
    wifis)
      local columns=(
        active device ssid mode signal chan freq rate security bssid)

      local -A values

      eval local "${columns[@]}" ifname
      local type=--

      local -A values

      while eval IFS=: read -r "${columns[@]}"; do
        [[ -z "$bssid" ]] && continue
        read -r bssid < <(eval printf "%b" "$bssid")
        signal="${signal}%"
        ifname="$device"

        readarray -t fmts < <(printf '"${%s:---}"\n' "${FIELDS[@]}")

        read -r line < <(eval printfmt "${fmts[@]}")

        WIFIS[$bssid,$ifname]="$line"
      done < <(IFS=,; nmcli -t -c no -f "${columns[*]}" device wifi list)
      ;;
  esac
}

OPTS+=(--with-nth 3.. --header-lines=1)
list() {
  eval "$S_CONNS"
  eval "$S_WIFIS"
  eval "$S_FIELDS"

  declare -A WIFIS
  declare -A CONNS

  local conns wifis

  show conns
  show wifis

  local wifi keys fmts

  readarray -t keys < <(printf "w_%s\n" "${FIELDS[@]}")

  eval local "${FIELDS[@]}"
  eval local "${keys[@]}"

  (
    for conn in "${CONNS[@]}"; do
      eval IFS="$iSEP" read -r "${FIELDS[@]}" <<< "$conn"

      wifi="${WIFIS[${bssid},${ifname}]}"

      if [[ -n "$wifi" ]]; then
        eval IFS="$iSEP" read -r "${keys[@]}" <<< "$wifi"

        mode="$w_mode"
        signal="$w_signal"
        chan="$w_chan"
        freq="$w_freq"
        rate="$w_rate"
        security="$w_security"

        readarray -t fmts < <(printf '"${%s:---}"\n' "${FIELDS[@]}")

        read -r conn < <(eval printfmt "${fmts[@]}")
        WIFIS[${bssid},${ifname}]=
      fi

      if [[ "$state" == yes ]]; then
        colorize green "$conn"
      elif [[ "$signal" == -- ]]; then
        colorize pink "$conn"
      elif (( ${signal%%%} >= 80 )); then
        colorize yellow "$conn"
      elif (( ${signal%%%} >= 40 )); then
        colorize red "$conn"
      elif (( ${signal%%%} < 40 )); then
        colorize violet "$conn"
      else
        echo "$conn"
      fi

    done
    printf "%s\n" "${WIFIS[@]}"
  ) | sort -t "$iSEP" -k 8 -k 10 |
    (IFS=,; column -t -s "$iSEP" -N "${FIELDS[*]^^}" -R PRIO,SIGNAL,CHAN,RATE)

  read -r S_CONNS < <(declare -p CONNS)
  export S_CONNS

  read -r S_WIFIS < <(declare -p WIFIS)
  export S_WIFIS
}

BINDS[rotate_mode]=alt-t
HOOKS[rotate_mode]=clear
DESCS[rotate_mode]='Rotate mode'
rotate_mode() {
	local mode="$(get_opt mode)"

	case "$mode" in
	connections) set_opt mode ssids ;;
	ssids) set_opt mode connections ;;
	esac
}
