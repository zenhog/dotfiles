#!/usr/bin/env bash

KEY=p
MOD='S-M'
ICON=󰍁
COLOR=springgreen

NOWRAP=1
RATIO=75

export STORE="$HOME/.password-store"

label() {
	quiet tmux show-buffer -b label
}

extract() {
	view "$1" | command extract GR_PASSVAL 2>/dev/tty
}

view() {
	local dir entries

	dir="$1"

	[[ -z "$dir" ]] && return

	readarray -t entries < <(cd "$STORE/$dir" && find -- * -type f)

	local val
	for entry in "${entries[@]}"; do
		unset val

		if [[ "$entry" == *.gpg ]]; then
			read -r val < <(quiet pass show "$dir/${entry%.gpg}")
		else
			read -r val <"$STORE/$dir/$entry"
		fi

		if [[ "$entry" == password* ]]; then
			local charspec

			read -r charspec < <(get "$dir" charspec)

			if silent check "$val" "$charspec"; then
				read -r val < <(colorize green "$val")
			else
				read -r val < <(colorize red "$val")
			fi
		fi

		printf "%s%s%s\n" "$entry" "$iSEP" "$val"
	done | column -t -s "$iSEP" -o "$oSEP"
	echo
	#qrencode -m1 -tANSI256 <<< "$val"
}

list() {
	(cd "$STORE" && find -- * .* \( -type d -or -type l \) -exec sh -c \
		'test -z "$(find "{}" -mindepth 1 -type d)" && echo {}' \; | sort)
}

rename() {
	local rand
	read -r rand < <(tr -dc '[:alnum:]' </dev/urandom | quiet dd bs=1 count=5)
	mv -v -- "${STORE}/$1.gpg" "${STORE}/$1.old.$rand.gpg"
}

get() {
	local dir="$1" key="$2"
	quiet pass show "$dir/$key" || quiet cat "$STORE/.defaults/$key"
}

insert() {
	local dir="$1" key="$2" val="$3" force="$4" curval

	[[ -z "${key?}" ]] && return 1

	read -r curval < <(get "$dir" "$key")

	[[ "$val" == "$curval" ]] && return 0

	pass insert -f "$dir/$key" < <(tee /dev/stdout <<<"$val")
}

check() {
	local password="${1}" charspec="${2}" length count specs regex

	[[ -n "${password}" && -n "${charspec}" ]] || return 1

	{
		read -r -d, length
		IFS=$',\n' readarray -d, -t -s 0 specs
	} <<<"${charspec}" || return 1

	read -r count < <((grep -o '.' | wc -l) <<<"$password")

	((count == length)) || return 1

	for spec in "${specs[@]}"; do
		local count class length
		IFS=$'|\n' read -r -d '' length class _ <<<"$spec"
		read -r count < <((grep -o "[${class}]" | wc -l) <<<"$password")
		((count >= length)) || return 1
	done

	read -r regex < <(printf "%s" "${specs[@]#*|}")

	grep -o "[^${regex}]" <<<"$password" && return 1 || return 0
}

BINDS[regen]=alt-r
HOOKS[regen]=noclear
DESCS[regen]='Regenerate password conform to spec'
regen() {
	local dir="$1" password charspec length specs regex

	read -r charspec < <(get "${dir}" charspec)
	{
		read -r -d, length
		IFS=$',\n' readarray -t -s 0 specs
	} <<<"${charspec}" || return 1

	mkdir -p "${STORE}/${dir}"

	silent pass show "${dir}/password" && rename "${dir}/password"

	read -r regex < <(printf "%s" "${specs[@]#*|}")

	until check "${password}" "${charspec}"; do
		PASSWORD_STORE_CHARACTER_SET="${regex}" \
			command pass generate -f "${dir}/password" "${length}"
		read -r password < <(quiet pass show "${dir}/password")
	done
}

BINDS[reloc]=alt-u
HOOKS[reloc]=noclear
DESCS[reloc]='Overwrite location'
reloc() {
	local dir="$1"
	#eval "$(tmux show-environment -t menu LOCATION 2>/dev/null)"
	#tmux set-environment -t menu -u LOCATION

	local newloc="$(tmux show-buffer -b label)"

	if [[ -n "$newloc" ]]; then
		rename "$dir/location"
		insert "$dir" location "$newloc" force
	fi
}

BINDS[cleanup]=alt-c
HOOKS[cleanup]=noclear
DESCS[cleanup]='Clean old password entries'
cleanup() {
	local dir="$1"
	[[ -d "${STORE}/${dir}" ]] && rm -f "${STORE}/${dir}"/*.old.*.gpg
}

BINDS[mod]=alt-w
HOOKS[mod]=sclear
DESCS[mod]='Modify entries'
mod() {
	local dir="$1" entry entries

	view "$dir" | tmux load-buffer -b preview -

	# IFS=$'\t \n' read -r -a entries < <(input ghost="'key1:val1 key2:val2 -key3'")
	IFS= read -r entry < <(input ghost="'key1:val1 key2:val2 -key3'")

  local args=("$@")

  eval "set -- $entry"

  entries=("$@")
  set -- "$@"

  unset entry

	tmux delete-buffer -b preview

  # the way to do this is to actually parse bash code and eval it
  # that way, you can do things like quoting and so on
	for entry in "${entries[@]}"; do
		if [[ "$entry" == -* ]]; then
			pass rm -f "$dir/${entry:1}"
		else
			local lhs rhs
			IFS=: read -r lhs rhs <<<"$entry"
			rename "$dir/$lhs"
			insert "$dir" "$lhs" "$rhs"
		fi
	done
}

BINDS[edit]=alt-e
HOOKS[edit]=sclear
DESCS[edit]='Rename directory entry'
edit() {
	local dir="$1" newdir

	view "$dir" | tmux load-buffer -b preview -

	read -r newdir < <(input ghost="$dir" query="$dir")

	tmux delete-buffer -b preview

	[[ ! -d "$STORE/$newdir" ]] &&
		(mkdir -p "$STORE/$newdir" && mv -Tvf -- "$STORE/$dir" "$STORE/$newdir")
}

BINDS[getuser]=alt-t
HOOKS[getuser]=accept
DESCS[getuser]='Clip username field'
getuser() {
	local dir="$1"
	quiet get "$dir" username | tmux load-buffer -
}

BINDS[getpass]=alt-y
HOOKS[getpass]=accept
DESCS[getpass]='Clip password field'
getpass() {
	local dir="$1"
	quiet get "$dir" password | tmux load-buffer -
}

BINDS[add]=alt-a
HOOKS[add]=sclear
DESCS[add]='Add directory entry'
add() {
	local dir
	read -r dir < <(input query="www/")
	mkdir -p "${STORE}/${dir}"
}

BINDS[del]=alt-d
HOOKS[del]=noclear
DESCS[del]='Remove directory entry'
del() {
	local dir="${1}"

	rm -rf "${STORE}/${dir}"
	(cd "$STORE" && find -- * -type d -empty -delete)
}

dom() {
	local IFS='.' i=0 matches

	local zones=($@)

	while [[ $i -lt $((${#zones[@]} - 1)) ]]; do
		readarray -t matches < <(cd "$STORE" &&
      find -- * \( -type d -or -type l \) -name "*${zones[*]:$i}")

		[[ -n "$matches" ]] && break

		((++i))
	done

	printf "%s\n" "${matches[@]}"
}

baseurl() {
	local IFS='.'

	local zones=($@)

	if [[ ${#zones[@]} -gt 2 ]]; then
		local chunks=(${zones[-1]})
		local i=2
		while [[ $i -le ${#zones[@]} ]]; do
			chunks=("${zones[-$i]}" "${chunks[@]}")
			[[ ${#zones[-$i]} -ge 4 ]] && break
			((i++))
		done
		zones=(${chunks[@]})
	fi

	printf "www/%s\n" "${zones[*]}"
}

grab() {
	local domain="$1" key="$2" index="$3" dirs

  readarray -t entries < <(dom "$domain")

  (( ${#entries[@]} == 0 )) && {
    notify "No entry found for '$domain'"
    return 1
  }

  local entry

  if [[ -z "$index" ]]; then
    {
      read -r _
      read -r entry _
    } < <(quiet menu input "${entries[@]}")
  else
    entry="${entries[$index]}"
  fi

  read -r entry < <(quiet get "$entry" "$key")

  if [[ -n "$entry" ]]; then
    echo "$entry"
		notify "Copied '$entry/$key'"
    return 0
  fi

  notify "Could not find entry '$domain/$key'"
  return 1
}

BINDS[open]=enter
HOOKS[open]=accept
DESCS[open]='Open location entry'
open() {
	local location dir="$1"

	read -r location < <(get "$dir" location)

	command open "$location"
}

BINDS[bgopen]=tab
HOOKS[bgopen]=noclear
DESCS[bgopen]='Open location entry in the background'
bgopen() {
	open "$@"
}

BINDS[fopen]=alt-enter
HOOKS[fopen]=clear
DESCS[fopen]='Open location entry'
fopen() {
	local location dir="$1"

	read -r location < <(get "$dir" location)

	urlopen "$location"
}

new() {
	local domain="${1}" location="${2}" force="${3}" dir dom

	echo -n "$location" | tmux load-buffer -b label -

	read -r dir < <(dom "${domain}" || baseurl "${domain}")

	[[ -d "${STORE}/${dir}" ]] && exec menu auto "$MODULE" -- "$dir"

	list | tmux load-buffer -b preview -
	list | tmux load-buffer -

	read -r dir < <(menu input ghost="$dir" query="$dir")

	tmux delete-buffer -b preview

	[[ -n "$dir" ]] &&
		insert "$dir" location "$location" "$force" &&
		regen "$dir" &&
		notify "Initialized dir '${dir}'"
	[[ -n "${dir}" ]]

}
