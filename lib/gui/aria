#!/usr/bin/env bash

KEY=d
MOD='S-M'
ICON=

HORIZONTAL=1
RATIO=45%

export ICON_DL=
export ICON_UL=
export DL_PATH="$HOME/downloads/"

query() {
  local query args params method="$1"
  local URL=http://localhost:6800/jsonrpc

  shift

  if [[ -n "$*" ]]; then
    read -r args < <(IFS=,; printf "%s" "$*")
    params="\"params\": [ $args ]"
  fi

  read -r -d '' query << EOF
  {
    "jsonrpc": "2.0",
    "id": "menu",
    "method": "$method",
    $params
  }
EOF

  curl -sL -X POST -H 'Content-Type: application/json' -d "$query" "$URL" |
    jq -r '.result'
}

request() {
  local method="$1"
  local gid="$2"

  shift 2

  case "$method" in
    stats)
      query aria2.getGlobalStat
      ;;
    status)
      query aria2.tellStatus "\"$gid\""
      ;;
    list)
      local numWaiting numStoppedTotal

      IFS=$'\n' read -r -d '' numWaiting numStoppedTotal < <(
        query aria2.getGlobalStat | jq -r '(.numWaiting, .numStoppedTotal)'
      )

      jq -n 'reduce inputs as $in
        (null; . + if $in|type == "array" then $in else [$in] end)' < <(
        query aria2.tellActive
        query aria2.tellWaiting 0 "$numWaiting"
        query aria2.tellStopped 0 "$numStoppedTotal"
      )
      ;;
    count)
      local numActive numWaiting numStoppedTotal

      IFS=$'\n' read -r -d '' numActive numWaiting numStoppedTotal < <(
        query aria2.getGlobalStat |
          jq -r '(.numActive, .numWaiting, .numStoppedTotal)'
      )

      printf "%d\n" $((numActive + numWaiting))
      ;;
    files)
      query aria2.getFiles "\"$gid\""
      ;;
    chpos)
      local pos="$1"
      local how="$2"

      query aria2.changePosition "\"$gid\"" "$pos" "\"$how\""
      ;;
    select)
      request setopt "$gid" \
        "$(printf '{ "select-file": "%s" }' "$(IFS=,; printf "%s" "$*")")"
      ;;
    selfile)
      local choices choice ind sel query selections

      readarray -t choices < <(view "$gid")

      local output

      local query selections

      {
        IFS= read -r query
        readarray -t selections
      } < <(input ghost="'@1 3-5 8'" "${choices[@]}")

      if [[ "$query" == @* ]]; then
        local args
        read -r -a args <<< "${query#@}"
        request select "$gid" "${args[@]}"
        return
      fi

      choices=("${choices[@]%% *}")
      choices=("${choices[@]#*:}")

      selections=("${selections[@]%% *}")

      for sel in "${selections[@]}"; do
        IFS=: read -r ind sel <<< "$sel"

        case "${choices[ind-1]}" in
          true)
            choices[ind-1]=false
            ;;
          false)
            choices[ind-1]=true
            ;;
        esac
      done

      local r

      for c in "${!choices[@]}"; do
        if [[ "${choices[c]}" == true ]]; then
          r+=($((c+1)))
        fi
      done

      request select "$gid" "${r[@]}"
      ;;
    pause)
      query aria2.pause "\"$gid\""
      ;;
    pauseAll)
      query aria2.pauseAll
      ;;
    unpause)
      query aria2.unpause "\"$gid\""
      ;;
    unpauseAll)
      query aria2.unpauseAll
      ;;
    add)
      local uri="$gid"
      local opts=("$@")
      query aria2.addUri " [ \"$gid\" ] " "${opts[@]}"
      ;;
    del)
      query aria2.remove "\"$gid\""
      ;;
    rm)
      query aria2.forceRemove "\"$gid\""
      ;;
    purge)
      query aria2.removeDownloadResult "\"$gid\""
      ;;
    purgeAll)
      query aria2.purgeDownloadResult
      ;;
    getgopt)
      query aria2.getGlobalOption
      ;;
    setgopt)
      query aria2.changeGlobalOption "$gid"
      ;;
    getopt)
      query aria2.getOption "\"$gid\""
      ;;
    setopt)
      local opts=("$@")
      query aria2.changeOption "\"$gid\"" "${opts[@]}"
      ;;
  esac
}

# TODO:
# max-concurrent-download-limit
# --optimize-concurrent-downloads  option

init() {
  set_opt mode global
  set_opt flow download
  set_opt unit K
  set_opt rate 10
}

label() {
  local ul dl maxuspeed maxdspeed gmaxuspeed gmaxdspeed

  IFS=$'\n' read -r -d '' dl ul < <(
    request stats | jq -r '(.downloadSpeed, .uploadSpeed)'
  )

  read -r maxdspeed < <(
    request getgopt | jq -r '."max-overall-download-limit"')
  read -r maxuspeed < <(request getgopt | jq -r '."max-overall-upload-limit"')

  read -r gmaxdspeed < <(
    request getgopt | jq -r '."max-download-limit"')
  read -r gmaxuspeed < <(request getgopt | jq -r '."max-upload-limit"')

  maxdspeed="$(numfmt --to=iec --suffix=Bps "$maxdspeed")"
  maxuspeed="$(numfmt --to=iec --suffix=Bps "$maxuspeed")"

  gmaxdspeed="$(numfmt --to=iec --suffix=Bps "$gmaxdspeed")"
  gmaxuspeed="$(numfmt --to=iec --suffix=Bps "$gmaxuspeed")"
 
  dl="$(numfmt --to=iec --suffix=Bps "$dl")"
  ul="$(numfmt --to=iec --suffix=Bps "$ul")"

	local unit="$(get_opt unit)"
  local mode="$(get_opt mode)"
  local flow="$(get_opt flow)"
  local rate="$(get_opt rate)"

	echo -n "[ mode: $mode, unit: $unit, flow: $flow, rate: $rate ]"

  printf "[ $ICON_DL %s $ICON_UL %s ]" \
    "$dl/$maxdspeed/$gmaxdspeed" "$ul/$maxuspeed/$gmaxuspeed"
}

view() {
  local gid
  read -r gid _ <<< "$1"

  local dled ind length path sel

  while IFS="$iSEP" read -r dled ind length path sel; do
    dled="$(numfmt --to=iec --suffix=B "$dled")"
    length="$(numfmt --to=iec --suffix=B "$length")"
    printfmt "$ind:$sel" "$dled/$length" "${path#"${DL_PATH}"}"
  done < <(request files "$gid" | jq -r ".[] | \
    [ .completedLength, .index, .length, .path, .selected ] | \
      join(\"$iSEP\")") |
        column -t -s "$iSEP"
  # sepline
  # request status "$gid" | yq -yC | bat -p --force-colorization --language=yaml
}

OPTS+=(--with-nth 2.. --header-lines=1)
list() {
  local list

  IFS= read -r -d '' list < <(request list)

  local gid status dled uled total conns dspeed uspeed names
  local progress maxuspeed maxdspeed dlh ulh th dsh ush name

  readarray -t gid < <(jq -r '.[] | .gid' <<< "$list")
  readarray -t status < <(jq -r '.[] | .status' <<< "$list")
  readarray -t dled < <(jq -r '.[] | .completedLength' <<< "$list")
  readarray -t uled < <(jq -r '.[] | .uploadLength' <<< "$list")
  readarray -t total < <(jq -r '.[] | .totalLength' <<< "$list")
  readarray -t conns < <(jq -r '.[] | .connections' <<< "$list")
  readarray -t dspeed < <(jq -r '.[] | .downloadSpeed' <<< "$list")
  readarray -t uspeed < <(jq -r '.[] | .uploadSpeed' <<< "$list")
  readarray -t names < <(jq -r '.[] | .files.[0].path' <<< "$list")

  {
    printfmt GID STATUS PERCENT DL.B/Total DL/Limit UL US/Limit NAME

    for i in "${!gid[@]}"; do
      unset dsh ush dlh ulh th maxuspeed maxdspeed name

      dsh="$(numfmt --to=iec --suffix=Bps "${dspeed[$i]}")"
      ush="$(numfmt --to=iec --suffix=Bps "${uspeed[$i]}")"

      dlh="$(numfmt --to=iec --suffix=B "${dled[$i]}")"
      ulh="$(numfmt --to=iec --suffix=B "${uled[$i]}")"

      th="$(numfmt --to=iec --suffix=B "${total[$i]}")"

      read -r maxdspeed < <(request getopt "${gid[$i]}" |
        jq -r '."max-download-limit"')
      read -r maxuspeed < <(request getopt "${gid[$i]}" |
        jq -r '."max-upload-limit"')

      maxdspeed="$(numfmt --to=iec --suffix=Bps "$maxdspeed")"
      maxuspeed="$(numfmt --to=iec --suffix=Bps "$maxuspeed")"

      progress[$i]="$(printf "%0.0f" \
        "$(echo "${dled[$i]} * 100. / ${total[$i]}" | bc)")"

      name="${names[$i]}"
      if [[ -z "$name" ]]; then
        read -r name < <(jq -r ".[] | select (.gid == ${gid[$i]}) |
          .[] | .files.[0].uris.[0].uri")
      fi

      name="$(basename "$name")"

      printline \
        "${gid[$i]}" "$iSEP" \
        "${status[$i]}" "$iSEP" \
        "$(colorize blueviolet "${progress[$i]}%")" "$iSEP" \
        "$(colorize royalblue "$ICON_DL $dlh/$th")" "$iSEP" \
        "$(colorize royalblue "$dsh/$maxdspeed")" "$iSEP" \
        "$(colorize yellow "$ICON_UL $ulh")" "$iSEP" \
        "$(colorize yellow "$ush/$maxuspeed")" "$iSEP" \
        "$(colorize red "$(basename "$name")")"
    done
  } | column -t -s "$iSEP"
}

BINDS[del]=alt-d
DESCS[del]='Delete entry'
del() {
  local gid status files
  read -r gid status _ <<< "$1"

  case "$status" in
    complete|error|removed)
      readarray -t files < <(request files "$gid" |
        jq -r '.[].path')

      for f in "${files[@]}"; do
        [[ -e "${f}.aria2" ]] && rm "${f}.aria2"
        case "$status" in
          complete)
            mkdir -p "$HOME/downloads/aria2/complete"
            mv "$f" "$HOME/downloads/aria2/complete/"
            ;;
          error|removed)
            [[ -f "$f" ]] && rm "$f"
            ;;
        esac
      done
      request purge "$gid"
      ;;
    *)
      request del "$gid"
      ;;
  esac

}

limit() {
  local limit flow="$1" op="$2" unit="$3" rate="$4" gid="$5"

  case "$unit" in
    K)
      rate=$((rate * 1024))
      ;;
    M)
      rate=$((rate * 1024 * 1024))
      ;;
  esac

  case "$gid" in
    ?*)
      read -r limit < <(request getopt "$gid" | jq -r ".\"max-$flow-limit\"")

      limit=$(( limit $op rate ))

      request setopt "$gid" \
        "$(printf '{ "max-%s-limit":"%d" }' "$flow" "$limit")"
      ;;
    *)
      read -r limit < <(request getgopt | jq -r ".\"max-$flow-limit\"")

      limit=$(( limit $op rate ))

      request setgopt \
        "$(printf '{ "max-%s-limit":"%d" }' "$flow" "$limit")"
      ;;
  esac
}

ctl() {
  local gid limit op="$1"

  shift

  read -r gid _ <<< "$1"

  local flow="$(get_opt flow)"
  local mode="$(get_opt mode)"
  local unit="$(get_opt unit)"
  local rate="$(get_opt rate)"

  if [[ "$unit" == M ]]; then
    rate=$((rate/10))
  fi

  if [[ -z "$gid" && "$mode" == overall ]]; then
    flow="overall-$flow"
  fi

  limit "$flow" "$op" "$unit" "$rate" "$gid"
}

BINDS[inc]=alt-l
DESCS[inc]='Increase Download Speed'
inc() {
  ctl + "$@"
}

BINDS[dec]=alt-h
DESCS[dec]='Decrease Download Speed'
dec() {
  ctl - "$@"
}
  # alt-p: overall/global
  # alt-n: overall/global

BINDS[ginc]=alt-p
DESCS[ginc]='Increase Global/Overall Speed'
ginc() {
  ctl +
}

BINDS[gdec]=alt-n
DESCS[gdec]='Decrease Global/Overall Speed'
gdec() {
  ctl -
}

BINDS[up]=alt-k
DESCS[up]='Go up'
up() {
  local gid
  read -r gid _ <<< "$1"
  request chpos "$gid" -1 POS_CUR
}

BINDS[down]=alt-j
DESCS[down]='Go up'
down() {
  local gid
  read -r gid _ <<< "$1"
  request chpos "$gid" 1 POS_CUR
}

BINDS[unit]=alt-u
DESCS[unit]='Rotate unit'
unit() {
  local unit="$(get_opt unit)"

  case "$unit" in
    K)
      set_opt unit M
      ;;
    M)
      set_opt unit K
      ;;
  esac
}

BINDS[mode]=alt-t
DESCS[mode]='Rotate limit between global and overall'
mode() {
  local mode="$(get_opt mode)"

  case "$mode" in
    global)
      set_opt mode overall
      ;;
    overall)
      set_opt mode global
      ;;
  esac
}

BINDS[flow]=alt-y
DESCS[flow]='Rotate flow between download and upload'
flow() {
  local flow="$(get_opt flow)"

  case "$flow" in
    download)
      set_opt flow upload
      ;;
    upload)
      set_opt flow download
      ;;
  esac
}

BINDS[rate]=alt-m
DESCS[rate]='Rotate rate between multiple orders of magnitude'
rate() {
  local rate="$(get_opt rate)"
  set_opt rate $(((rate + 10) % 100))
}

BINDS[toggle]=enter
DESCS[toggle]='Toggle pause'
toggle() {
  # alt-enter: toggle all
  # alt-r: restart
  local gid status
  read -r gid status _ <<< "$1"

  case "$status" in
    paused)
      request unpause "$gid"
      ;;
    active)
      request pause "$gid"
      ;;
    error)
      local uri out

      read -r uri < <(request files "$gid" | jq -r '.[0].uris.[0].uri')
      read -r out < <(request files "$gid" | jq -r '.[0].path')

      out="$(basename "$out")"

      del "$gid $status"

      local json
      read -r json < <(
        printf '{ "out": "%s", "gid": "%s", "continue": true }' "$out" "$gid")

      request add "$uri" "$json"
      ;;
  esac
}

BINDS[toggleall]=alt-enter
DESCS[toggleall]='Toggle all'
toggleall() {
  local gid status
  read -r gid status _ <<< "$1"

  case "$status" in
    paused)
      request unpauseAll "$gid"
      ;;
    active)
      request pauseAll "$gid"
      ;;
  esac
}

BINDS[sel]=tab
HOOKS[sel]=sclear
DESCS[sel]='Select Files'
sel() {
  local gid status
  read -r gid status _ <<< "$1"

  case "$status" in
    paused|active)
      request selfile "$gid"
      ;;
  esac
}

BINDS[refresh]=alt-r
DESCS[refresh]='Refresh status'
refresh() {
  :
}
