#!/usr/bin/env bash

KEY=d
MOD='S-M'
ICON=

HORIZONTAL=1

export ICON_DL=
export ICON_UL=
export DL_PATH="$HOME/downloads/"

query() {
  local query args params method="$1"
  local URL=http://localhost:6800/jsonrpc

  shift

  if [[ -n "$*" ]]; then
    read -r args < <(IFS=,; printf "%s" "$*")
    params="\"params\": [ $args ]"
  fi

  read -r -d '' query << EOF
  {
    "jsonrpc": "2.0",
    "id": "menu",
    "method": "$method",
    $params
  }
EOF

  curl -sL -X POST -H 'Content-Type: application/json' -d "$query" "$URL" |
    jq -r '.result'
}

request() {
  local method="$1"
  local gid="$2"

  shift 2

  case "$method" in
    stats)
      query aria2.getGlobalStat
      ;;
    status)
      query aria2.tellStatus "$gid"
      ;;
    list)
      local numWaiting numStoppedTotal

      IFS=$'\n' read -r -d '' numWaiting numStoppedTotal < <(
        query aria2.getGlobalStat | jq -r '(.numWaiting, .numStoppedTotal)'
      )

      jq -n 'reduce inputs as $in
        (null; . + if $in|type == "array" then $in else [$in] end)' < <(
        query aria2.tellActive
        query aria2.tellWaiting 0 "$numWaiting"
        query aria2.tellStopped 0 "$numStoppedTotal"
      )
      ;;
    count)
      local numActive numWaiting numStoppedTotal

      IFS=$'\n' read -r -d '' numActive numWaiting numStoppedTotal < <(
        query aria2.getGlobalStat |
          jq -r '(.numActive, .numWaiting, .numStoppedTotal)'
      )

      printf "%d\n" $((numActive + numWaiting))
      ;;
    files)
      query aria2.getFiles "\"$gid\""
      ;;
    select)
      request setopt "$gid" \
        "$(printf '{ "select-file": "%s" }' "$(IFS=,; printf "%s" "$*")")"
      ;;
    selfile)
      local choices choice ind sel query selections

      readarray -t choices < <(view "$gid")

      local output

      local query selections

      {
        IFS= read -r query
        readarray -t selections
      } < <(input ghost="'@1 3-5 8'" "${choices[@]}")

      if [[ "$query" == @* ]]; then
        local args
        read -r -a args <<< "${query#@}"
        request select "$gid" "${args[@]}"
        return
      fi

      choices=("${choices[@]%% *}")
      choices=("${choices[@]#*:}")

      selections=("${selections[@]%% *}")

      for sel in "${selections[@]}"; do
        IFS=: read -r ind sel <<< "$sel"

        case "${choices[ind-1]}" in
          true)
            choices[ind-1]=false
            ;;
          false)
            choices[ind-1]=true
            ;;
        esac
      done

      local r

      for c in "${!choices[@]}"; do
        if [[ "${choices[c]}" == true ]]; then
          r+=($((c+1)))
        fi
      done

      request select "$gid" "${r[@]}"
      ;;
    pause)
      query aria2.pause "\"$gid\""
      ;;
    pauseAll)
      query aria2.pauseAll
      ;;
    unpause)
      query aria2.unpause "\"$gid\""
      ;;
    unpauseAll)
      query aria2.unpauseAll
      ;;
    add)
      local uri="$gid"
      local opts=("$@")
      query aria2.addUri " [ \"$gid\" ] " "${opts[@]}"
      ;;
    del)
      query aria2.remove "\"$gid\""
      ;;
    rm)
      query aria2.forceRemove "\"$gid\""
      ;;
    purge)
      query aria2.removeDownloadResult "\"$gid\""
      ;;
    purgeAll)
      query aria2.purgeDownloadResult
      ;;
    getgopt)
      query aria2.getGlobalOption
      ;;
    setgopt)
      query aria2.changeGlobalOption "$gid"
      ;;
    getopt)
      query aria2.getOption "\"$gid\""
      ;;
    setopt)
      local opts=("$@")
      query aria2.changeOption "\"$gid\"" "${opts[@]}"
      ;;
  esac
}

label() {

  local ul dl maxuspeed maxdspeed

  IFS=$'\n' read -r -d '' dl ul < <(
    request stats | jq -r '(.downloadSpeed, .uploadSpeed)'
  )

  read -r maxdspeed < <(
    request getgopt | jq -r '."max-overall-download-limit"')
  read -r maxuspeed < <(request getgopt | jq -r '."max-overall-upload-limit"')

  maxdspeed="$(numfmt --to=iec --suffix=Bps "$maxdspeed")"
  maxuspeed="$(numfmt --to=iec --suffix=Bps "$maxuspeed")"
 
  dl="$(numfmt --to=iec --suffix=Bps "$dl")"
  ul="$(numfmt --to=iec --suffix=Bps "$ul")"

  printf " $ICON_DL %s $ICON_UL %s " "$dl/$maxdspeed" "$ul/$maxuspeed"
}

view() {
  local gid
  read -r gid _ <<< "$1"

  # request files "$gid" | yq -yC | bat -p --force-colorization --language=yaml

  while IFS="$iSEP" read -r dled ind length path sel; do
    dled="$(numfmt --to=iec --suffix=B "$dled")"
    length="$(numfmt --to=iec --suffix=B "$length")"
    printfmt "$ind:$sel" "$dled/$length" "${path#${DL_PATH}}"
  done < <(request files "$gid" | jq -r ".[] | \
    [ .completedLength, .index, .length, .path, .selected ] | \
      join(\"$iSEP\")") |
        column -t -s "$iSEP"
}

OPTS+=(--with-nth 2..)
list() {
  local list

  IFS= read -r -d '' list < <(request list)

  local gid status dled uled total conns dspeed uspeed names
  local progress maxuspeed maxdspeed dlh ulh th dsh ush name

  readarray -t gid < <(jq -r '.[] | .gid' <<< "$list")
  readarray -t status < <(jq -r '.[] | .status' <<< "$list")
  readarray -t dled < <(jq -r '.[] | .completedLength' <<< "$list")
  readarray -t uled < <(jq -r '.[] | .uploadLength' <<< "$list")
  readarray -t total < <(jq -r '.[] | .totalLength' <<< "$list")
  readarray -t conns < <(jq -r '.[] | .connections' <<< "$list")
  readarray -t dspeed < <(jq -r '.[] | .downloadSpeed' <<< "$list")
  readarray -t uspeed < <(jq -r '.[] | .uploadSpeed' <<< "$list")
  readarray -t names < <(jq -r '.[] | .files.[0].path' <<< "$list")

  for i in "${!gid[@]}"; do
    unset dsh ush dlh ulh th maxuspeed maxdspeed name

    dsh="$(numfmt --to=iec --suffix=Bps "${dspeed[$i]}")"
    ush="$(numfmt --to=iec --suffix=Bps "${uspeed[$i]}")"

    dlh="$(numfmt --to=iec --suffix=B "${dled[$i]}")"
    ulh="$(numfmt --to=iec --suffix=B "${uled[$i]}")"

    th="$(numfmt --to=iec --suffix=B "${total[$i]}")"

    read -r maxdspeed < <(request getopt "${gid[$i]}" |
      jq -r '."max-download-limit"')
    read -r maxuspeed < <(request getopt "${gid[$i]}" |
      jq -r '."max-upload-limit"')

    maxdspeed="$(numfmt --to=iec --suffix=Bps "$maxdspeed")"
    maxuspeed="$(numfmt --to=iec --suffix=Bps "$maxuspeed")"

    progress[$i]="$(printf "%0.0f" \
      "$(echo "${dled[$i]} * 100. / ${total[$i]}" | bc)")"

    name="${names[$i]}"
    if [[ -z "$name" ]]; then
      read -r name < <(jq -r ".[] | select (.gid == ${gid[$i]}) |
        .[] | .files.[0].uris.[0].uri")
    fi

    name="$(basename "$name")"

    printline \
      "${gid[$i]}" "$iSEP" \
      "${status[$i]}" "$iSEP" \
      "$(colorize blueviolet "${progress[$i]}%")" "$iSEP" \
      "$(colorize royalblue "$ICON_DL $dlh/$th")" "$iSEP" \
      "$(colorize royalblue "$dsh/$maxdspeed")" "$iSEP" \
      "$(colorize yellow "$ICON_UL $ulh")" "$iSEP" \
      "$(colorize yellow "$ush/$maxuspeed")" "$iSEP" \
      "$(colorize red "$(basename "$name")")"
  done | column -t -s "$iSEP"
}

BINDS[del]=alt-d
DESCS[del]='Delete entry'
del() {
  local gid status files
  read -r gid status _ <<< "$1"

  case "$status" in
    complete|error|removed)
      readarray -t files < <(request files "$gid" |
        jq -r '.[].path')

      for f in "${files[@]}"; do
        [[ -e "${f}.aria2" ]] && rm "${f}.aria2"
        case "$status" in
          complete)
            mkdir -p "$HOME/downloads/aria2/complete"
            mv "$f" "$HOME/downloads/aria2/complete/"
            ;;
          error|removed)
            [[ -f "$f" ]] && rm "$f"
            ;;
        esac
      done
      request purge "$gid"
      ;;
    *)
      request del "$gid"
      ;;
  esac

}

BINDS[dinc]=alt-l
DESCS[dinc]='Increase Download Speed'
dinc() {
  local gid dlimit

  read -r gid _ <<< "$1"

  read -r dlimit < <(request getopt "$gid" | jq -r '."max-download-limit"')

  if (( dlimit < 1024 * 1024 )); then
    dlimit=$((dlimit + 1024 * 10))
  else
    dlimit=$((dlimit + 1024 * 1024))
  fi

  request setopt "$gid" \
    "$(printf '{ "max-download-limit":"%d" }' "$dlimit")"
}

BINDS[ddec]=alt-h
DESCS[ddec]='Decrease Download Speed'
ddec() {
  local gid dlimit

  read -r gid _ <<< "$1"

  read -r dlimit < <(request getopt "$gid" | jq -r '."max-download-limit"')

  if (( dlimit < 1024 * 1024 )); then
    dlimit=$((dlimit - 1024 * 10))
  else
    dlimit=$((dlimit - 1024 * 1024))
  fi

  request setopt "$gid" \
    "$(printf '{ "max-download-limit":"%d" }' "$dlimit")"
}

BINDS[dgdec]=alt-a
DESCS[dgdec]='Decrease Global Download Speed'
dgdec() {
  local gid dlimit

  read -r gid _ <<< "$1"

  read -r dlimit < <(
    request getgopt "$gid" | jq -r '."max-overall-download-limit"')

  if (( dlimit < 1024 * 1024 )); then
    dlimit=$((dlimit - 1024 * 10))
  else
    dlimit=$((dlimit - 1024 * 1024))
  fi

  if (( dlimit < 0 )); then
    dlimit=0
  fi

  request setgopt "$(printf '{ "max-overall-download-limit":"%d" }' "$dlimit")"
}

BINDS[dginc]=alt-e
DESCS[dginc]='Increase Global Download Speed'
dginc() {
  local gid dlimit

  read -r gid _ <<< "$1"

  read -r dlimit < <(
    request getgopt "$gid" | jq -r '."max-overall-download-limit"')

  if (( dlimit < 1024 * 1024 )); then
    dlimit=$((dlimit + 1024 * 10))
  else
    dlimit=$((dlimit + 1024 * 1024))
  fi

  request setgopt "$(printf '{ "max-overall-download-limit":"%d" }' "$dlimit")"
}

BINDS[toggle]=enter
DESCS[toggle]='Toggle pause'
toggle() {
  # alt-t: toggle K, M
  # alt-m: toggle Global, Overall
  # alt-enter: toggle all
  # alt-r: restart
  # alt-j: down
  # alt-p: up
  # alt-h: dec
  # alt-l: inc
  # alt-p: overall/global
  # alt-n: overall/global
  local gid status
  read -r gid status _ <<< "$1"

  case "$status" in
    paused)
      request unpause "$gid"
      ;;
    active)
      request pause "$gid"
      ;;
    error)
      local files uri out
      read -r gid status _ <<< "$1"

      read -r uri < <(request files "$gid" | jq -r '.[0].uris.[0].uri')
      read -r out < <(request files "$gid" | jq -r '.[0].path')

      out="$(basename "$out")"

      request add "$uri" " { \"out\": \"$out\" } "

      del "$gid $status"
      ;;
  esac
}

BINDS[toggleall]=alt-enter
DESCS[toggleall]='Toggle all'
toggleall() {
  local gid status
  read -r gid status _ <<< "$1"

  case "$status" in
    paused)
      request unpauseAll "$gid"
      ;;
    active)
      request pauseAll "$gid"
      ;;
  esac
}

BINDS[sel]=tab
HOOKS[sel]=sclear
DESCS[sel]='Select Files'
sel() {
  local gid status
  read -r gid status _ <<< "$1"

  case "$status" in
    paused|active)
      request selfile "$gid"
      ;;
  esac
}

BINDS[refresh]=alt-r
DESCS[refresh]='Refresh status'
refresh() {
  :
}
