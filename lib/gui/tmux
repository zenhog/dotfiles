#!/usr/bin/env bash

KEY=o
MOD='S-M'
ICON=

NOWRAP=1

RATIO=75%

export CMDSYM=➡
export CMDPAT="$CMDSYM"
export CMDPAT="^.*$CMDSYM.*$"
export TMUX_DIR="$HOME/.config/tmux"
export TMUX_CONFIG="$TMUX_DIR/tmux.conf"
export MUXSOCKET="$HOME/.vmux.S"

function label() {
  local mode="$(get_opt mode)"

  echo " mode: $mode "
}

function init() {
  set_opt mode sessions
}

function list() {
  local mode="${1:-$(get_opt mode)}"

  set_opt mode "$mode"

  "list-$mode"
}

function format() {
  local mode="$1"
  local name="$2"

  shift

  case "$mode" in
    session)
      printf "%s %s %s\n" "$(get icon "$name")" "$name" "$(get host "$name")"
      ;;
    name)
      printf "%s %s\n" "$(get icon "$name")" "$name"
      ;;
    host)
      printf "%s %s\n" "$(get icon "$name")" "$(get host "$name")"
      ;;
    window)
      local s w
      IFS=$': \t' read -r s i w <<< "$name"
      printf "%s %s %s\n" "$(get icon "$s")" "$s:$i" "$w"
      ;;
    pane)
      local s i p cmd
      IFS=$':. \t' read -r s i p w cmd <<< "$name"
      printf "%s %s %s %s\n" "$(get icon "$s")" "$s:$i.$p" "$w" "$cmd"
      ;;
  esac
}

function get() {
  local key="$1"
  local session="$2"

  local host icon

  if read -r host < <(is_remote "$session"); then
    icon=󰣀
  else
    host=localhost
    icon=󰆦
  fi

  case "$key" in
    icon) echo -n "$icon" ;;
    host) echo -n "$host" ;;
  esac
}

function list-sessions() {
  local sessions
  readarray -t sessions < <(tmux ls -F '#S')

  for session in "${sessions[@]}"; do
    format session "$session"
  done | column -t
}

function list-windows() {
  local sessions

  readarray -t sessions < <(list-sessions | grep "${1:-.}")

  for s in "${sessions[@]}"; do
    local icon session host

    read -r icon session host <<< "$s"

    readarray -t windows < <(dmux "session:$session" list-windows \
      -t "$session" -F '#S:#I #W')

    for window in "${windows[@]}"; do
      format window "$window"
    done

  done | column -t
}

function list-panes() {
  local windows

  readarray -t windows < <(list-windows | grep "${1:-.}")

  for w in "${windows[@]}"; do
    local icon session wid wname panes
    IFS=$': \t' read -r icon session wid wname <<< "$w"

    readarray -t panes < <(dmux "session:$session" \
      list-panes -t "$session:$wid" -F '#S:#I.#P #W:#{pane_current_command}')

    for pane in "${panes[@]}"; do
      format pane "$pane"
    done
  done | column -t
}

function view() {
  local mode id

  mode="$(get_opt mode)"

  read -r _ id _ <<< "$1"

  case "$mode" in
    sessions)
      view-session "$id"
      ;;
    windows)
      view-window "$id"
      ;;
    panes)
      view-pane "$id"
      ;;
  esac
}

function view-session() {
  local session="$1" windows

  readarray -t windows < <(list-windows "$session")

  for window in "${windows[@]}"; do
    local id
    read -r _ id _ <<< "$window"
    view-window "$id"
  done
}

function view-window() {
  local window="$1" panes

  readarray -t panes < <(list-panes "$window")

  for pane in "${panes[@]}"; do
    local id
    read -r _ id _ <<< "$pane"
    view-pane "$id"
  done
}

function view-pane() {
  local session host pane="$1"

  IFS=: read -r session _ <<< "$pane"

  read -r host < <(is_remote "$session")

  ansi --reset-color
  sepline " $pane "
  if [[ -n "$host" ]]; then
    rmux "$host" capture-pane -t "$pane" -pe
  else
    tmux capture-pane -t "$pane" -pe
  fi
}

BINDS[rotate_mode]=alt-t
HOOKS[rotate_mode]=clear
DESCS[rotate_mode]='Rotate mode'
function rotate_mode() {
  local mode="$(get_opt mode)"

  case "$mode" in
    sessions) set_opt mode windows ;;
    windows)  set_opt mode panes ;;
    panes)    set_opt mode sessions ;;
  esac
}

function status() {
  local type="${1?}"

  case "$type" in
    left)
      ;;
    right)
      ;;
  esac
}

function extract-pane() {
  # pane, window, session
  local pane="$1"

  read -r pane < <(tmux display -p '#S:#I.#P')

  tmux new-window -n grep bash -c \
    "tmux capture-pane -pNq -t ${pane} | fzfgrep"
}

function mksession() {
  local kind="${1?}"
  local name="${2?}"
  local tmux=(tmux)

  shift 2

  [[ -n "$HOST" ]] && tmux=(rmux "$HOST")

  case "$kind" in
    local)
      if mute "${tmux[@]}" has-session -t "$name"; then
        echo "Local session '$name' already exists." >&2
        return 0
      else
        "${tmux[@]}" new-session -ds "$name"
      fi

      if ! mute "${tmux[@]}" has-session -t "$name"; then
        echo "Failed to create local session '$name'." >&2
        return 1
      fi

      "${tmux[@]}" set -t "$name" @kind "$kind"
      ;;
    remote)
      local port host="$1"

      shift

      if mute tmux has-session -t "$name"; then
        echo "Remote session '$name' already exists." >&2
        return 0
      fi

      HOST="$host" mksession local "$name"

      read -r port < <(gui ssh revport "$host")

      gui ssh rexec "$host" tmux set -t "$name" @port "$port"

      tmux new-session -ds "$name" \
        gui ssh ttyexec "$host" tmux attach -t "$name"

      if ! mute tmux has-session -t "$name"; then
        echo "Failed to create remote session '$name'." >&2
        return 1
      fi

      tmux set -t "$name" status off

      tmux set -t "$name" @kind "$kind"
      tmux set -t "$name" @host "$host"
      ;;
  esac
}

function window() {
  local kind="$1" session="$2" window="$3"

  shift 3

  case "$kind" in
    local)
      attach "$kind" "$session" || return
      tmux new-window -S -n "$window" -t "=${session}:" "$@"
      ;;
    remote)
      local host="${1?}"

      shift

      attach "$kind" "$session" "$host" || return
      rmux "$host" new-window -S -n "$window" -t "=${session}:" "$@"
      ;;
  esac
}

function cursor() {
  local word="$(tmux display -p '#{copy_cursor_word}')"
  local x="$(tmux display -p '#{copy_cursor_x}')"
  local y="$(tmux display -p '#{copy_cursor_y}')"
  local match="$(tmux display -p '#{search_match}')"

  tmux send-keys -X
  tmux display "Word under cursor: '$word' at ($x, $y), match: '$match'"
}

function lastcmd() {
  tmux copy-mode
  tmux send-keys -X search-backward "$CMDPAT"
  tmux send-keys -X search-again
}

function pagecmd() {
  tmux copy-mode
  tmux send-keys -X search-backward "$CMDPAT"
  tmux send-keys -X begin-selection
  tmux send-keys -X search-again
  tmux send-keys -X copy-selection-and-cancel
  tmux show-buffer | less
}

function nextcmd() {
  # send-keys -X previous-prompt/next-prompt
  local word="$(tmux display -p '#{copy_cursor_word}')"
  if [[ "$word" != "$CMDSYM" ]]; then
    #tmux send-keys -X cursor-right
    tmux send-keys -X end-of-line
  fi
  tmux send-keys -X search-forward "$CMDPAT"
}

function prevcmd() {
  local word="$(tmux display -p '#{copy_cursor_word}')"

  if [[ "$word" != "$CMDSYM" ]]; then
    #tmux send-keys -X cursor-left
    tmux send-keys -X start-of-line
  fi
  tmux send-keys -X search-backward "$CMDPAT"
}

function reload() {
  tmux source "$TMUX_CONFIG"
}

function colors() {
  source "$TMUX_DIR/10-theme.conf"
  source "$TMUX_DIR/30-options.conf"
}

function copytk() {
  tmux run "copytk easycopy --search-nkeys 1"
}

function gethint() {
  function printscreen() {
    tmux send-keys -X cancel
    tput clear
    if [[ -z "$screen" ]]; then
      readarray -t screen <<< "$text"
    fi
    printf "%s\n" "${screen[@]}"
    tmux copy-mode -H
    tmux send-keys -X page-up
  }

  function hintup() {
    local key matches hintkeys=qwertyuiopasdfghjklzxcvbnm

    readarray -t hintkeys < <(grep -o . <<< "$hintkeys")


    # print the initial text
    printscreen

    # read the key
    read -r key < <(tmux command-prompt -1 -p InputChar 'display -p %%')

    # prompt was canceled, need to cancel the whole operation
    [[ -z "$key" ]] && return

    # find matches
    readarray -t matches < <(rg -o --column -- "$key" <<< "$text")

    local hints

    # fill in the the hints table
    local j=$(( (${#matches[@]} - 1) / ${#hintkeys[@]} ))
    local i=$j

    for h in "${!hintkeys[@]}"; do
      if (( h % 2 == 0 )) && (( j > 0 )); then
        local c1="${hintkeys[$h]}"
        local c2="${hintkeys[$((h+1))]}"

        hints+=("{$c1,$c2}")
        ((j--))
      fi
    done

    hints+=("{$(IFS=,; printf "%s" "${hintkeys[*]:$((i*2))}")}")

    read -r -a hints < <(eval echo $(IFS=; printf "%s" "${hints[*]}"))

    # clone our original text
    local rounds=$((i+1))
    local round=0

    while (( round < rounds )); do
      local screen

      readarray -t screen <<< "$text"

      local shifts
      for m in "${!matches[@]}"; do
        local line col char hint altline

        IFS=: read -r line col char <<< "${matches[$m]}"

        line=$(( line - 1))
        col=$(( col - 1 ))

        shift[$line]=0

        hint="${hints[$m]:$round:1}"

        read -r hint < <(ansi --red "$hint")

        altline="${screen[$line]:0:$((col - 4))}"

        altline+="$hint"

        altline+="${screen[$line]:$(( (col-3) + shift[$line] * 10 ))}"

        shift[$line]=$(( shift[$line] + 1 ))

        screen[$line]="$altline"
      done

      printscreen

      read -r key < <(tmux command-prompt -1 -p InputChar 'display -p %%')
      (( round++ ))
    done
  }

  local pane="$1" text

  IFS= read -r -d '' text < <(tmux capture-pane -t "$pane" -p)

  hintup

  unset hintup
  unset printscreen
}

function hintcopy() {
  local pane="$(tmux display -p '#S:#I.#P')"

  tmux new-window -S -n hint -t "$(hostname):" gui tmux gethint "$pane"
}

function extract() {
  local pane="$(tmux display -p '#S:#I.#P')"
  tmux new-window -n grep bash -c "tmux capture-pane -pNq -t "$pane" | fzfgrep"
}

function sync_clipboard() {
  if [[ -n "$DISPLAY" ]]; then
    local tmuxdata=$(tmux show-buffer | base64)
    local xseldata=$(xsel -ob | base64)

    if [[ "$tmuxdata" != "$xseldata" ]]; then
      echo -n "$tmuxdata" | base64 -d | xsel -ib
    fi
  fi
}

function forward_buffer() {
  local name="$(tmux display -p '#S')"
  local kind="$(mute tmux show -vt "$name" @kind)"
  local port="$(mute tmux show -vt "$name" @port)"

  if [[ -n "$port" ]]; then

    local data=$(tmux show-buffer | base64)

    tmux delete-buffer

    exec 3<>"/dev/tcp/localhost/$port"

    echo "$data" >&3

    exec 3>&-
    exec 3<&-

    return
  else
    sync_clipboard
  fi
}

function setup_session() {
  :
}

function cleanup_session() {
  :
}

function is_remote() {
  local sid="$1"

  [[ -z "$sid" ]] && read -r sid < <(tmux display -p '#S')

  [[ -n "$sid" ]] && quiet tmux show -vt "$sid" @host
}

function rmux() {
  local host="$1"

  shift

  [[ -n "$host" ]] && gui ssh rexec "$host" tmux "$@" || tmux "$@"
}

function dmux() {
  local session="$(tmux display -p '#S')"

  if [[ "$1" == session:* ]]; then
    session="${1#session:}"
    shift
  fi

  [[ -n "$session" ]] || return

  local kind="$(tmux show -vt "$session" @kind)"

  if [[ "$kind" == remote ]]; then
    local host="$(tmux show -vt "$session" @host)"
    rmux "$host" "$@"
  elif [[ "$kind" == local ]]; then
    tmux "$@"
  fi
}

function mod() {
  local mode="$1"

  shift

  case "$mode" in
    fg) mode=fg "$@" ;;
    bg) mode=bg "$@" ;;
  esac
}

BINDS[open]=enter
HOOKS[open]=accept
DESCS[open]='Open a session/window/pane'
function open() {
  local id mode="$(get_opt mode)"

  read -r _ id _ <<< "$1"

  "open-${mode:0:-1}" "$id"
}

function open-session() {
  local sid="$1"
  local host="$(is_remote "$sid")"

  if [[ -n "$host" ]]; then
    gui tmux attach remote "$sid" "$host"
  else
    gui tmux attach local "$sid"
  fi
}

function open-window() {
  local sid host id="$1"

  IFS=: read -r sid _ <<< "$id"

  read -r host < <(is_remote "$sid")

  if [[ -n "$host" ]]; then
    rmux "$host" select-window -t "$id"
    open-session "$sid"
  else
    tmux select-window -t "$id"
    open-session "$sid"
  fi
}

function open-pane() {
  local sid host id="$1"

  IFS=.: read -r sid wid _ <<< "$id"

  read -r host < <(is_remote "$sid")

  if [[ -n "$host" ]]; then
    rmux "$host" select-pane -t "$id"
    open-window "$sid:$wid"
  else
    tmux select-pane -t "$id"
    open-window "$sid:$wid"
  fi
}

BINDS[del]=alt-d
DESCS[del]='Delete a session/window/pane'
function del() {
  local id mode="$(get_opt mode)"

  read -r _ id _ <<< "$1"

  "del-${mode:0:-1}" "$id"
}

function del-session() {
  local sid="$1"
  local host="$(is_remote "$sid")"

  if [[ -n "$host" ]]; then
    rmux "$host" kill-session -t "$sid"
  else
    tmux kill-session -t "$sid"
  fi
}

function del-window() {
  local sid host id="$1"

  IFS=: read -r sid _ <<< "$id"

  read -r host < <(is_remote "$sid")

  if [[ -n "$host" ]]; then
    rmux "$host" kill-window -t "$id"
  else
    tmux kill-window -t "$id"
  fi
}

function del-pane() {
  local sid host id="$1"

  IFS=.: read -r sid wid _ <<< "$id"

  read -r host < <(is_remote "$sid")

  if [[ -n "$host" ]]; then
    rmux "$host" kill-pane -t "$id"
  else
    tmux kill-pane -t "$id"
  fi
}

function rename() {
  :
}

function attach() {
  local kind="${1?}"
  local name="${2?}"
  local host="$3"

  local class=tmux

  [[ -n "$host" ]] && class=rmux

  shift

  mksession "$kind" "$name" "$host" ||
    failwith "Failed to create $kind session '$name' on ${host:-localhost}"

  if on_xsession; then
    gui awm runonce "${mode:-fg}" "instance=$name" -- \
      alacritty --class "$class,$name" --command tmux attach -dxt "$name"

  elif [[ "$TERM" == linux ]] && [[ "$(tty)" == /dev/pts/* ]]; then
    TERM=fbterm tmux attach -dxt "$session"

  elif [[ -n "$TMUX" ]]; then
    tmux switch-client -t "$name" && tmux detach-client -s "$name"
  fi
}
