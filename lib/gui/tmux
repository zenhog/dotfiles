#!/usr/bin/env bash

KEY=o
MOD='S-M'
ICON=

NOWRAP=1

export CMDSYM=➡
export CMDPAT="^.*$CMDSYM.*$"
export TMUX_DIR="$HOME/.config/tmux"
export TMUX_CONFIG="$TMUX_DIR/tmux.conf"
export MUXSOCKET="$HOME/.vmux.S"

function label() {
  local mode="$(get_opt mode)"

  case "$mode" in
    0) mode=sessions ;;
    1) mode=windows ;;
    2) mode=panes ;;
  esac

  echo " mode: $mode "
  # echo host
  # echo port
  # echo kind
  # echo state?
}

function init() {
  silent get_opt mode || set_opt mode 0
  set_opt mode-mod 3
}

function list() {
  local mode="$(get_opt mode)"

  case "$mode" in
    0) list-sessions ;;
    1) list-windows ;;
    2) list-panes ;;
  esac
}

function list-sessions() {
  local sessions
  readarray -t sessions < <(tmux ls -F '#S')

  printf "%s\n" "${sessions[@]}"
}

function list-windows() {
  local sessions

  readarray -t sessions < <(list-sessions)

  for session in "${sessions[@]}"; do
    dmux "session:$session" list-windows -t "$session" -F '#S:#I #W'
  done | column -t
}

function list-panes() {
  local panes

  readarray -t windows < <(list-windows)

  for window in "${windows[@]}"; do
    dmux "session:${window%:*}" list-panes -t "${window%:*}" -F '#S:#I.#P'
  done | column -t
}

function view() {
  local id mode="$(get_opt mode)"

  read -r id _ <<< "$1"

  case "$mode" in
    0) view-session "$id";;
    1) view-window "$id";;
    2) view-pane "$id";;
  esac
}

function view-session() {
  local ids
  readarray -t ids < <(dmux list-windows -t "$1" -F '#S:#I')
  for id in "${ids[@]}"; do
    view-window "$id"
  done
}

function view-window() {
  local ids
  readarray -t ids < <(dmux list-panes -t "$1" -F '#S:#I.#P')

  for id in "${ids[@]}"; do
    view-pane "$id"
  done
}

function view-pane() {
  ansi --reset-color
  sepline "> $id <"
  dmux capture-pane -t "$1" -pe
}

BINDS[rotate_mode]=alt-t
HOOKS[rotate_mode]=clear
DESCS[rotate_mode]='Rotate mode'
function rotate_mode() {
  rotate_opt mode
}

function status() {
  local type="${1?}"

  case "$type" in
    left)
      ;;
    right)
      ;;
  esac
}

function extract-pane() {
  # pane, window, session
  local pane="$1"

  read -r pane < <(tmux display -p '#S:#I.#P')
    tmux new-window -n grep bash -c \
        "tmux capture-pane -pNq -t ${pane} | fzfgrep"
}

function mksession() {
  local kind="${1?}"
  local name="${2?}"

  shift 2

  case "$kind" in
    local|menu)
      tmux has-session -t "$name" || tmux new-session -ds "$name"

      tmux has-session -t "$name" || failwith "Failed creating session '$name'"

      tmux setenv -t "$name" TMUX_SESSION_NAME "$name"
      tmux setenv -t "$name" TMUX_SESSION_KIND "$kind"

      if [[ "$kind" == menu ]]; then
        tmux set -t "$name" status off
        tmux set -t "$name" key-table menu
      fi

      tmux set -t "$name" @kind "$kind"

      ;;
    remote)
      local port host="$1"

      shift

      if tmux has-session -t "$name"; then
        echo "Remote session '$name' already exists" >&2
        return
      fi

      gui ssh sync "$host" || failwith "Failed to sync host '$host'"

      gui ssh rexec "$host" gui tmux mksession local "$name" ||
        failwith "Failed creating remote session '$name'"

      read -r port < <(gui ssh revport "$host")

      gui ssh rexec "$host" tmux set -t "$name" @port "$port"

      tmux new-session -ds "$name" \
        gui ssh ttyexec "$host" tmux attach -t "$name"

      tmux has-session -t "$name" || failwith "Failed creating session '$name'"

      tmux set -t "$name" status off

      tmux set -t "$name" @kind "$kind"
      tmux set -t "$name" @host "$host"
      ;;
  esac
}

function window() {
  local kind="${1?}"
  local session="${2?}"
  local window="${3?}"

  shift 3

  case "$kind" in
    local|menu)
      attach "$kind" "$session" || return
      tmux new-window -S -n "$window" -t "=${session}:" "$@"
      ;;
    remote)
      local host="${1?}"

      shift

      attach "$kind" "$session" "$host" || return
      rmux "$host" new-window -S -n "$window" -t "=${session}:" "$@"
      ;;
  esac
}

function cursor() {
  local word="$(tmux display -p '#{copy_cursor_word}')"
  local x="$(tmux display -p '#{copy_cursor_x}')"
  local y="$(tmux display -p '#{copy_cursor_y}')"
  local match="$(tmux display -p '#{search_match}')"

  tmux send-keys -X
  tmux display "Word under cursor: '$word' at ($x, $y), match: '$match'"
}

function lastcmd() {
  tmux copy-mode
  tmux send-keys -X search-backward "$CMDPAT"
  tmux send-keys -X search-again
}

function pagecmd() {
  tmux copy-mode
  tmux send-keys -X search-backward "$CMDPAT"
  tmux send-keys -X begin-selection
  tmux send-keys -X search-again
  tmux send-keys -X copy-selection-and-cancel
  tmux show-buffer | less
}

function nextcmd() {
  # send-keys -X previous-prompt/next-prompt
  local word="$(tmux display -p '#{copy_cursor_word}')"
  if [[ "$word" != "$CMDSYM" ]]; then
    #tmux send-keys -X cursor-right
    tmux send-keys -X end-of-line
  fi
  tmux send-keys -X search-forward "$CMDPAT"
}

function prevcmd() {
  local word="$(tmux display -p '#{copy_cursor_word}')"

  if [[ "$word" != "$CMDSYM" ]]; then
    #tmux send-keys -X cursor-left
    tmux send-keys -X start-of-line
  fi
  tmux send-keys -X search-backward "$CMDPAT"
}

function reload() {
  tmux source "$TMUX_CONFIG"
}

function colors() {
  source "$DIR/10-theme.conf"
  source "$DIR/30-options.conf"
}

function copytk() {
  tmux run "copytk easycopy --search-nkeys 1"
}

function hintcopy() {
  # capture the target pane
  # set the alternate screen
  # tmux command-prompt -1 'display -p %%'
  # readlines -t matches < <(rg -o --column -- "$key" "$capture")
  #   IFS=: read -r line col <<< "$match"
  # mapfile -t ${lines[@]} < <(capture-pane)
  # replace ${lines[$line]:$col:1} with $key

  local matches lines lines1 lines2 cap key

  IFS= read -d '' cap < <(tmux capture-pane -t "$pane" -p)

  readlines -t inlines  <<< "$cap"
  readlines -t outlines <<< "$cap"

  local hintkeys=qwertyuiopasdfghjklzxcvbnm
  local hintchars="$hintkeys"

  readlines -t matches < <(rg -o --column -- "$key" <<< "$cap")

  local i=0 roundchars="$hintkeys"
  local hints hintchars

  local rounds=$(( (${#matches[@]} + $#hintkeys - 1) / $#hintkeys ))

  for match in "${matches[@]}"; do
    local line col char hints output
    IFS=: read -r line col char <<< "$match"
    read -r hints < <(genhints "$char")
    read -r output < <(printf "%s%s%s" "${outlines[$line]:0:$col}" "$hints" \
      "${outlines[$line]:$(($col+${#hints}))}")
    outlines[$line]="$output"
  done
}

function extract() {
  local pane="$(tmux display -p '#S:#I.#P')"
  tmux new-window -n grep bash -c "tmux capture-pane -pNq -t "$pane" | fzfgrep"
}

function sync_clipboard() {
  if [[ -n "$DISPLAY" ]]; then
    local tmuxdata=$(tmux show-buffer | base64)
    local xseldata=$(xsel -ob | base64)

    if [[ "$tmuxdata" != "$xseldata" ]]; then
      echo -n "$tmuxdata" | base64 -d | xsel -ib
    fi
  fi
}

function forward_buffer() {
  local name="$(tmux display -p '#S')"
  local kind="$(mute tmux show -vt "$name" @kind)"
  local port="$(mute tmux show -vt "$name" @port)"

  if [[ -n "$port" ]]; then

    local data=$(tmux show-buffer | base64)

    tmux delete-buffer

    exec 3<>"/dev/tcp/localhost/$port"

    echo "$data" >&3

    exec 3>&-
    exec 3<&-

    return
  else
    sync_clipboard
  fi
}

function setup_session() {
  :
}

function cleanup_session() {
  :
}

function is_remote() {
  local sid="$1"

  [[ -z "$sid" ]] && read -r sid < <(tmux display -p '#S')

  [[ -n "$sid" ]] && tmux show -vt "$sid" @host
}

function rmux() {
  local host="$1"

  shift

  gui ssh rexec "$host" tmux "$@"
}

function dmux() {
  local session="$(tmux display -p '#S')"

  if [[ "$1" == session:* ]]; then
    session="${1#session:}"
    shift
  fi

  [[ -n "$session" ]] || return

  local kind="$(tmux show -vt "$session" @kind)"

  if [[ "$kind" == remote ]]; then
    local host="$(tmux show -vt "$session" @host)"
    rmux "$host" "$@"
  elif [[ "$kind" == local ]] || [[ "$kind" == menu ]]; then
    tmux "$@"
  fi
}

function on_xsession() {
    local rtty ctty

    read -r ctty < <(cat /sys/class/tty/tty0/active)
    read -r rtty < <(cat "/tmp/.X11-unix/registrations/$USER/tty")

    [[ "$ctty" == "$rtty" ]]
}

function attach() {
  local kind="${1?}"
  local name="${2?}"
  local host="$3"

  local class=tmux

  [[ -n "$host" ]] && class=rmux

  shift

  mksession "$kind" "$name" "$host" ||
    failwith "Failed to create $kind session '$name' on ${host:-localhost}"

  if on_xsession; then
    gui awm runonce fg "instance=$name" -- \
      alacritty --class "$class,$name" --command tmux attach -dxt "$name"

  elif [[ "$TERM" == linux ]] && [[ "$(tty)" == /dev/pts/* ]]; then
    TERM=fbterm tmux attach -dxt "$session"

  elif [[ -n "$TMUX" ]]; then
    tmux switch-client -t "$name" && tmux detach-client -s "$name"
  fi
}

# kill
# 
# rename
