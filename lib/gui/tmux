#!/usr/bin/env bash

KEY=o
MOD='S-M'
ICON=î¯ˆ

NOWRAP=1

export MUXSOCKET="$HOME/.vmux.S"

function label() {
  local mode="$(get_opt mode)"

  case "$mode" in
    0) mode=sessions ;;
    1) mode=windows ;;
    2) mode=panes ;;
  esac

  echo " mode: $mode "
}

function init() {
  set_opt mode 0
  set_opt mode-mod 3
}

function list() {
  local mode="$(get_opt mode)"

  case "$mode" in
    0) list-sessions ;;
    1) list-windows ;;
    2) list-panes ;;
  esac
}

function list-sessions() {
  local sessions
  readarray -t sessions < <(tmux ls -F '#S')

  for s in "${sessions[@]}"; do
    mute is_remote "$s" && s="$(ansi --yellow "$s")"
    echo "$s"
  done
}

function list-windows() {
  local sid="$1"
  if [[ -n "$sid" ]]; then
    dmux list-windows -t "$sid" -F '#S:#I #W' | column -t
  else
    dmux list-windows -a -F '#S:#I #W' | column -t
  fi
}

function list-panes() {
  local wid="$1"
  if [[ -n "$wid" ]]; then
    dmux list-panes -t "$wid" -F '#S:#I.#P' | column -t
  else
    dmux list-panes -a -F '#S:#I.#P' | column -t
  fi
}

function view() {
  local id mode="$(get_opt mode)"

  read -r id _ <<< "$1"

  case "$mode" in
    0) view-session "$id";;
    1) view-window "$id";;
    2) view-pane "$id";;
  esac
}

function view-session() {
  local ids
  readarray -t ids < <(dmux list-windows -t "$1" -F '#S:#I')
  for id in "${ids[@]}"; do
    view-window "$id"
  done
}

function view-window() {
  local ids
  readarray -t ids < <(dmux list-panes -t "$1" -F '#S:#I.#P')

  for id in "${ids[@]}"; do
    view-pane "$id"
  done
}

function view-pane() {
  ansi --reset-color
  sepline "> $id <"
  dmux capture-pane -t "$1" -pe
}

BINDS[rotate_mode]=alt-t
DESCS[rotate_mode]='Rotate mode'
function rotate_mode() {
  rotate_opt mode
}

function new-session() {
  mute tmux has-session -t "$1" || tmux new-session -ds "$1" "${@:2}"
}

function mksession() {
  local type="$1"
  local name="$2"

  shift 2

  case "$type" in
    local)
      new-session "$name" || return
      set_opt "session-${name}-kind" local
      tmux setenv -t "$name" TMUX_SESSION_KIND "$type"
      tmux setenv -t "$name" TMUX_SESSION_NAME "$name"
      ;;
    master)
      local port host="$1"

      shift

      verbose gui ssh sync "$host" || return

      verbose new-session "$name" gui ssh ttyexec "$host" \
        gui tmux mksession slave "$name" || return

      read -r port < <(gui ssh revport "$host")

      set_opt "session-${name}-kind" master
      set_opt "session-${name}-host" "$host"

      tmux setenv -t "$name" TMUX_SESSION_KIND master
      tmux setenv -t "$name" TMUX_SESSION_HOST "$host"
      tmux setenv -t "$name" TMUX_SESSION_NAME "$name"

      verbose gui ssh rexec "$host" \
        gui tmux set_opt "session-${name}-port" "$port"
      verbose rmux "$host" setenv -t "$name" TMUX_SESSION_PORT "$port"
      ;;
  esac
}

function is_remote() {
  local sid="$1"

  [[ -z "$sid" ]] && read -r sid < <(tmux display -p '#S')

  [[ -n "$sid" ]] && get_opt "host-$sid"
}

function rmux() {
  local host="$1"

  shift

  gui ssh rexec "$host" tmux "$@"
}

function dmux() {
  local host="$(is_remote "$1")"

  shift

  [[ -n "$host" ]] && rmux "$host" "$@" || tmux "$@"
}


function on_xsession() {
    local rtty ctty

    read -r ctty < <(cat /sys/class/tty/tty0/active)
    read -r rtty < <(cat "/tmp/.X11-unix/registrations/$USER/tty")

    [[ "$ctty" == "$rtty" ]]
}

function open-session() {
  local session="$1"
  local class=tmux

  [[ -n "$HOST" ]] && class=rmux

  shift

  if on_xsession; then
    gui awm runonce fg instance="$session" -- \
      alacritty --class "$class,$session" --command gui tmux new "$session" "$@"

  #tmux attach -t "$session"


  elif [[ -n "$TMUX" ]]; then
    exec gui tmux new "$@"

  elif [[ "$TERM" == linux ]] && [[ "$(tty)" == /dev/pts/* ]]; then
    exec env TERM=fbterm gui tmux new "$@"
  fi
}

BINDS[open]=enter
HOOKS[open]=accept
DESCS[open]='Run or raise selected tmux session'
function open() {
  function open_session() {
    local name="$1"
    if on_xsession; then

      [[ "$name" == menu ]] && VERB=exec || VERB=run

      awm "$VERB" instance="@$name" -- alacritty --class "tmux,$name" --command \
        tmux new-session -DX -As "$name" "${@:2}"

      until tmux has-session -t "$session"; do
        sleep 0.1
        awm show instance="@$name"
      done
    else
      if [[ -n "$TMUX" ]]; then
        tmux has-session -t "$name" || tmux new-session -ds "$name" "${@:2}"
        tmux switch-client -t "$name"
      else
        if [[ "$TERM" == linux && "$(tty)" =~ /dev/pts/.* ]]; then
          PRE="TERM=fbterm"
        fi
        env "$PRE" tmux new-session -As "$name" "${@:2}"
      fi
    fi
    tmux set-environment -t "$name" TMUX_SESSION_NAME "$name"
  }

  local kind="${1%%:*}"
  local rest="${1#*:}"
  case "$kind" in
    session)
      local session="$rest"
      open_session "$session" "${@:2}"
      ;;
    window) # format: $session_name:$window_number:$window_name
      local window_id="${rest%:*}"
      local window_name="${rest##*:}"
      local session="${rest%%:*}"
      local winflag="${rest#*:}"
      winflag="${winflag%%:*}"

      open_session "$session"
      if [[ "$winflag" == "@" ]]; then
        tmux new-window -S -n "$window_name" -t "=${session}:" "${@:2}"
      else
        tmux select-window -t "$window_id"
      fi
      ;;
  esac
}

BINDS[close]=alt-d
DESCS[close]='Delete selected tmux session'
function close() {
  local kind="${1%%:*}"
  local rest="${1#*:}"
  case "$kind" in
    session)
      tmux kill-session -t "$rest"
      ;;
    window) # format: $session_name:$window_number:$window_name
      local window_id="${rest%:*}"
      local window_name="${rest##*:}"
      local session="${rest%%:*}"
      local winflag="${rest#*:}"
      winflag="${winflag%%:*}"

      tmux kill-window -t "$session:$winflag"
      ;;
  esac
}
