#!/usr/bin/env bash

KEY=s
MOD='S-M'
ICON=ï€‚

NOWRAP=1

export UEBERZUG_PREVIEW=1

init() {
	#set_opt pwd "$HOME/.marks"
	[[ -n "$(get_opt pwd)" ]] || set_opt pwd "$HOME/.marks"
	set_opt hide 0
	set_opt mode 0
	set_opt mode-mod 3
}

folder_save() {
	set_opt pwd "$(pwd)"
}

folder_restore() {
	FOLDER="$(get_opt pwd)"
}

path() {
	local path="$(filter all "$1")"

	folder_restore

	if [[ "${path:0:1}" == / ]]; then
		realpath -s "$path"
	else
		realpath -s "$FOLDER/$path"
	fi
}

folder_cd() {
	cd "$(path "$1")" && folder_save
}

label() {
	local path="$(path "$FOLDER")"
	local mode="$(get_opt mode)"
	local hide="$(get_opt hide)"
	printf "%s - hide = %s - mode = %s" "$path" "$hide" "$mode"
}

mimetype() {
	# assuming valid absolute path
	local path="$(path "$1")"

	printf "%s (%s - %s)\n" "$path" "$(file -bL --mime-type "$path")" \
		"$(du -hs "$path" | awk '{print $1}')"
}

view() {
	local path="$(path "$1")"

	mimetype "$path"
	sepline
	command preview "$path"
}

state_update() {
	folder_restore
	restore_opt hide

	read -r HIDE < <(get_opt hide)
	read -r MODE < <(get_opt mode)

	case "$HIDE" in
	1)
		LSD_OPTS=('-A')
		FD_OPTS=('-H')
		;;
	0)
		LSD_OPTS=()
		FD_OPTS=()
		;;
	esac

	case "$MODE" in
	0) FD_OPTS+=(-td) ;; # find dirs
	1) FD_OPTS+=(-tf) ;; # find files
	2) FD_OPTS+=(-tl) ;; # find links
	*) ;;
	esac

	FD_OPTS+=(--base-directory "$FOLDER")

	LIST_CMD=(lsd -1 --no-symlink --group-dirs=first "${LSD_OPTS[@]}")
	SEARCH_CMD=(fd "${FD_OPTS[@]}")
}

BINDS[list]=alt-w
DESCS[list]='Reload current directory listing'
list() {
	local dir="$1"

	state_update

	if [[ -n "$dir" ]]; then
		folder_cd "$dir" && folder_restore
	fi

	"${LIST_CMD[@]}" "$FOLDER/"
}

BINDS[search]=alt-s
HOOKS[search]=search
CALLS[search]='reload-sync(%s {} {q})+clear-query'
DESCS[search]='Search arbitrary pattern with fd'
search() {
	state_update
	cd "$FOLDER" && "${SEARCH_CMD[@]}" "$2"
}

BINDS[rotate_mode]=alt-y
HOOKS[rotate_mode]=search
DESCS[rotate_mode]='Rotate mode'
rotate_mode() {
	rotate_opt mode
	search "$1" "$2"
}

BINDS[toggle_hide]=alt-t
DESCS[toggle_hide]='Toggle hidden'
toggle_hide() {
	toggle_opt hide
}

BINDS[rename]=alt-r
HOOKS[rename]=sclear
DESCS[rename]='Prompt rename entry'
rename() {
	folder_restore
	local entry="$1"

	export MENU_INPUT_PREVIEW="$entry"

	read -r input < <(cd "$FOLDER" && input "$entry")
	mv -- "$FOLDER/$entry" "$FOLDER/$input"
}

BINDS[mark]=alt-m
DESCS[mark]='Mark entry'
mark() {
	local path="$(path "$1")"

	local marksdir="$HOME/.marks"

	local target="$(realpath -m --relative-to="$marksdir" "$path")"

	local link="$(basename "$path")"

	(cd "$marksdir" && ln -svf "$target" "${link#.}")
}

BINDS[attach]=alt-f
DESCS[attach]='Select entry'
attach() {
	local path="$(path "$1")"
	mkdir -p "$HOME/.selections"
	ln -svf "$path" "$HOME/.selections"
}

BINDS[marks]=alt-space
DESCS[marks]='Go to marks directory'
marks() {
	save_opt hide
	set_opt hide 0
	folder_cd "$HOME/.marks"
}

BINDS[home]=alt-q
DESCS[home]='Home directory'
home() {
	folder_cd "$HOME"
}

BINDS[add]=alt-a
DESCS[add]='Create directory'
add() {
	local query="$2"
	folder_restore
	mkdir -p "$FOLDER/$query"
}

BINDS[del]=alt-d
DESCS[del]='Delete entry definitively'
del() {
	rm -rf "$(path "$1")"
}

BINDS[open]=tab
HOOKS[open]=noclear
DESCS[open]='Open entry'
open() {
	command open "$(path "$1")"
}

BINDS[_open]=alt-enter
HOOKS[_open]=accept
DESCS[_open]='Open entry and quit'
_open() {
	open "$1"
}

BINDS[vimsession]=alt-u
HOOKS[vimsession]=accept
DESCS[vimsession]='Open vim project and quit'
vimsession() {
	command open "$(path "$1")" nvim
}

BINDS[enter]=enter
DESCS[enter]='Change Directory'
enter() {
	folder_cd "$1"
}

BINDS[back]=esc
DESCS[back]='Parent Directory'
back() {
	folder_cd ..
}

atfinish() {
	#unset_opt pwd
	unset_opt hide
	unset_opt mode
}
