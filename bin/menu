#!/usr/bin/env bash

source "$HOME/.bin/gui"

export UEBERZUG_FIFO="$HOME/.menuloop-zug.fifo"

atexit() {
	silent declare -F atfinish && atfinish
}

# BINDS[help]=alt-h
# HOOKS[help]=help
help() {
	eval "$S_DESCS"
	eval "$S_BINDS"
	eval "$S_GDESCS"

	sepline " Global bindings "
	for func in "${!GDESCS[@]}"; do
		echo "${BINDS[$func]} $iSEP ${GDESCS[$func]}"
	done | column -t -s "$iSEP" -o "$oSEP" | sort -k1 -r

	echo
	sepline " ${MODULE^^} bindings "

	for func in "${!DESCS[@]}"; do
		echo "${BINDS[$func]} $iSEP ${DESCS[$func]}"
	done | column -t -s "$iSEP" -o "$oSEP" | sort -k1 -r
}

urlopen() {
	local choice alternatives

	readarray -t alternatives < <(browser list)

	read -r choice < <(choice "${alternatives[@]}")

	local cmd

	IFS=$'-' read -r -a cmd <<<"$choice"

	browser "${cmd[@]}" "$@"
}

BINDS[copyentry]='alt-\'
GDESCS[copyentry]='Clip entry'
copyentry() {
	echo -n "$1" | fzf --ansi -f '' | tmux load-buffer -
}

BINDS[extract]='alt-/'
HOOKS[extract]=sclear
GDESCS[extract]='Fzfgrep preview'
extract() {
	preview "$1" | command extract 2>/dev/tty
}

BINDS[change]=change
HOOKS[change]=change
CALLS[change]='change-preview(preview {})'

BINDS[paste]=alt-b
HOOKS[paste]=paste
GDESCS[paste]='Paste clipboard'
CALLS[paste]='transform-query(echo -n {q}; tmux showb)'

BINDS[eval]=btab
HOOKS[eval]=eval
GDESCS[eval]='Evaluate shell expressions'
CALLS[eval]='change-preview(eval {q})'

BINDS[qalc]=alt-bs
HOOKS[qalc]=qalc
GDESCS[qalc]='Evaluate qalc expressions'
CALLS[qalc]='change-preview(eval qalc {q})'

inputpreview() {
	tmux show-buffer -b preview 2>/dev/null && tmux delete-buffer -b preview
}

choice() {

	local cmd

	cmd=('fzf')
	cmd+=('--border' 'sharp')
	cmd+=('--prompt' "choice($MODULE)> ")
	cmd+=('--query' "$query")
	cmd+=('--ansi' '--reverse' '--cycle' '--no-multi')
	cmd+=('--info=inline-right')
	cmd+=('--no-separator')
	cmd+=('--preview' 'inputpreview')
	cmd+=('--preview-window' 'bottom,30%,border-top')
	# cmd+=('--bind' 'alt-b:transform-query(echo -n {q}; tmux showb)')

	printf "%s\n" "$@" | "${cmd[@]}" 2>/dev/tty
}

input() {

	local cmd fifo preview ghost query lines

  MODULE=debug set_opt input-args "$(IFS=:; printf "%s\n" "$*")"

  for arg in "$@"; do
    [[ "$arg" == *=* ]] && eval "$arg" || lines+=("$arg")
  done

  [[ -z "$preview" ]] && IFS= read -r -d '' preview < <(inputpreview)

	cmd=('fzf' '--print-query')
	cmd+=('--border' 'sharp')
	cmd+=('--prompt' "input($MODULE)> ")
  cmd+=('--query' "$query")
	cmd+=('--ansi' '--reverse' '--cycle' '--multi')
	# cmd+=('--ansi' '--reverse' '--cycle' '--no-multi')
	cmd+=('--info=inline-right')
	cmd+=('--no-separator')
	cmd+=('--preview' "echo '$preview'")
	cmd+=('--preview-window' 'bottom,60%,border-top')
  cmd+=('--ghost' "$ghost")
	# cmd+=('--bind' 'alt-b:transform-query(echo -n {q}; tmux showb)')

  {
    if [[ -n "$fifo" ]]; then
      "${cmd[@]}" 2>/dev/tty >"$fifo"
    else
      "${cmd[@]}" 2>/dev/tty
    fi
  } < <(
    for line in "${lines[@]}"; do
      printf "%s\n" "$line"
    done
  )
}

main() {
	trap atexit EXIT

	if [[ "$1" == input ]]; then
		export -f inputpreview
		input "${@:2}"
		return
	fi

	export MODULE="$1"

	source "$MODULES_DIR/$MODULE" || exit 1

	shift 1

	while read -r _ _ func _; do
		export -f "$func"
	done < <(declare -F)

  EXPORTS+=(BINDS HOOKS CALLS DESCS GDESCS)

  for exp in "${EXPORTS[@]}"; do
    eval read -r S_$exp < <(eval declare -p ${exp})
    eval export S_$exp
  done

	# read -r S_BINDS < <(declare -p BINDS)
	# export S_BINDS
	# read -r S_HOOKS < <(declare -p HOOKS)
	# export S_HOOKS
	# read -r S_CALLS < <(declare -p CALLS)
	# export S_CALLS
	# read -r S_DESCS < <(declare -p DESCS)
	# export S_DESCS
	# read -r S_GDESCS < <(declare -p GDESCS)
	# export S_GDESCS

	COMMAND+=(fzf)
	COMMAND+=(--prompt="$MODULE> ")
	COMMAND+=(--border=bold)
	COMMAND+=(--info=inline-right)
	COMMAND+=(--no-separator)
	COMMAND+=(--ansi)
	COMMAND+=(--cycle)
	COMMAND+=(--no-multi)

	if [[ "$1" == -- ]]; then
		COMMAND+=(--query "${*:2}")
	else
		LIST_ARGS=("${@:2}")
	fi

	if [[ -n "$PREVIEW_CMD" ]]; then
		COMMAND+=(--preview="$PREVIEW_CMD")
	elif silent declare -F view; then
		COMMAND+=(--preview="preview {}")
	fi

	focusbinds+=("change-preview(preview {})")

	if silent declare -F label; then
		loadbinds+=("transform-border-label(do_call label {} {q})")
		focusbinds+=("${loadbinds[@]}")
	fi

	if silent declare -F previewlabel; then
		loadbinds+=("transform-preview-label(do_call previewlabel {} {q})")
		focusbinds+=("${loadbinds[@]}")
	fi

	if [[ -n "$focusbinds" ]]; then
		COMMAND+=(--bind "focus:$(
			IFS=+
			printf "%s" "${focusbinds[*]}"
		)")
	fi

	if [[ -n "$PREVIEW_LABEL_OFFSET" ]]; then
		COMMAND+=(--preview-label-pos="$PREVIEW_LABEL_OFFSET")
	fi

	if [[ -n "$loadbinds" ]]; then
		COMMAND+=(--bind "load:$(
			IFS=+
			printf "%s" "${loadbinds[*]}"
		)")
	fi

	WINDOW=right,border-bold
	EXTRA=(
		--bind
		'ctrl-x:change-preview-window(bottom,border-bold|right,border-bold)'
	)

	if [[ -n "$HORIZONTAL" ]]; then
		WINDOW=bottom,border-rounded
		EXTRA=(
			--bind
			'ctrl-x:change-preview-window(right,border-bold|bottom,border-bold)'
		)
	else
		case "$POSITION" in
		TOP)
			WINDOW=top,border-bottom
			;;
		BOTTOM)
			WINDOW=bottom,border-top
			;;
		LEFT)
			WINDOW=left,border-right
			;;
		RIGHT)
			WINDOW=right,border-left
			;;
		esac
	fi

	[[ -n "$RATIO" ]] && WINDOW+=",$RATIO" || WINDOW+=,65%

	[[ -z "$NOWRAP" ]] && WINDOW+=,wrap
	[[ -n "$FOLLOW" ]] && WINDOW+=,follow

	COMMAND+=(--preview-window="$WINDOW")

	for func in "${!BINDS[@]}"; do
		local key hook call cmd

		key="${BINDS[$func]}"

		hook="${HOOKS[$func]}"
		hook="${hook:-${CALLS[$func]}}"
		hook="${hook:-${HOOKS[default]}}"

		read -r call < <(eval printf -- '"${CALLS[$hook]}"' "$func")

		read -r cmd < <(printf -- '--bind=%s:%s' "$key" "$call")

		COMMAND+=("$cmd")
	done

	[[ -n "$EXTRA" ]] && COMMAND+=("${EXTRA[@]}")
	[[ -n "$OPTS" ]] && COMMAND+=("${OPTS[@]}")

	mute declare -F init && init

	list "${LIST_ARGS[@]}" | "${COMMAND[@]}"
}

dispatch() {
	local mode="$1"

	shift

	export DISPATCH_MODE="$mode"

	case "$mode" in
	input)
		# local query="$*"

		local fifo="$(mktemp --dry-run --suffix=.fifo)"

		mkfifo "$fifo"

    menu loop input fifo="$fifo" "$@"

		local output

		IFS= read -r -d '' output <"$fifo"

		rm -f "$fifo"

    printf "%s" "$output"
		;;
	main)
		main "$@"
		;;
	shell)
		if [[ -n "$TMUX" ]]; then
			tmux popup -BE -w 100% -h 100% menu main "$@"
		else
			main "$@"
		fi
		;;
	popup)
		tmux popup -BE -w 100% -h 100% menu main "$@"
		;;
	loop)
		socat STDIN "UNIX-CONNECT:$HOME/.menu.S" < <(
			IFS=:
			printf "%s\n" "$*"
		)
		;;
	auto)
		if on_xsession; then
			exec menu loop "$@"
		else
			exec menu shell "$@"
		fi
		;;
	esac
}

dispatch "$@"
