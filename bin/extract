#!/usr/bin/env bash

finish() {
    rm -f "$INPUT"
}

trap finish EXIT

declare -A PATTERNS=()
declare -A SUBMATCHES=()

# GROUP: QUOTES
PATTERN_GROUPS+=(GR_QUOTES)
GR_QUOTES=(SINGLE_QUOTE DOUBLE_QUOTE BACK_QUOTE)
PATTERNS[SINGLE_QUOTE]="'([^']+)'"
SUBMATCHES[SINGLE_QUOTE]=1
PATTERNS[DOUBLE_QUOTE]='"([^"]+)"'
SUBMATCHES[DOUBLE_QUOTE]=1
PATTERNS[BACK_QUOTE]='`([^`]+)`'
SUBMATCHES[BACK_QUOTE]=1

# ENCODINGS
PATTERN_GROUPS+=(GR_ENCODINGS)
GR_ENCODINGS=(BASE64)
PATTERNS[BASE64]='(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?'

# GROUP: BRACKETS
PATTERN_GROUPS+=(GR_BRACKETS)
GR_BRACKETS=(PARENTHESIS ANGLE_BRACKET SQUARE_BRACKET CURLY_BRACKET)
PATTERNS[PARENTHESIS]='(?:\(([^()]+)\))'
PATTERNS[ANGLE_BRACKET]='<([^<>]+)>'
SUBMATCHES[ANGLE_BRACKET]=1
PATTERNS[SQUARE_BRACKET]='\[([^\[\]]+)\]'
SUBMATCHES[SQUARE_BRACKET]=1
PATTERNS[CURLY_BRACKET]='\{([^{}]+)\}'
SUBMATCHES[CURLY_BRACKET]=1

# SUPERGROUP: PAIRS
PATTERN_GROUPS+=(GR_PAIRS)
GR_PAIRS=("${GR_QUOTES[@]}" "${GR_BRACKETS[@]}")

# GROUP: UIDS
PATTERN_GROUPS+=(GR_SIGS)
GR_SIGS=(MD5 SHA160 SHA224 SHA256 SHA384 SHA512 IPFS UUID COLOR DOCKER)
PATTERNS[MD5]='[0-9a-f]{32}'
PATTERNS[SHA160]='[0-9a-fA-F]{40}'
PATTERNS[SHA224]='[0-9a-f]{56}'
PATTERNS[SHA256]='[0-9a-fA-F]{64}'
PATTERNS[SHA384]='[0-9a-fA-F]{96}'
PATTERNS[SHA512]='[0-9a-fA-F]{128}'
PATTERNS[IPFS]='Qm[0-9a-zA-Z]{44}'
PATTERNS[UUID]='[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}'
PATTERNS[COLOR]='#[0-9a-fA-F]{6}'
PATTERNS[DOCKER]='sha256:([0-9a-f]{64})'

# GROUP: PASSVAL
PATTERN_GROUPS+=(GR_PASSVAL)
GR_PASSVAL=(PASSVAL)
PATTERNS[PASSVAL]='^.*âž¡[[:blank:]]+(.*)$'
SUBMATCHES[PASSVAL]=1

# GROUP: EMAIL
PATTERN_GROUPS+=(GR_EMAIL)
GR_EMAIL=(EMAIL)
PATTERNS[EMAIL]='\S+@\S+\.\S+'

# GROUP: DOTNAME
PATTERN_GROUPS+=(GR_DOTNAME)
GR_DOTNAME=(DOTNAME)
PATTERNS[DOTNAME]='[[:blank:]]((\w+\.)+\w+)'

# GROUP: URLS
PATTERN_GROUPS+=(GR_URLS)
GR_URLS=(URL MARKDOWN_URL)
PATTERNS[URL]='(((http|https|ftp|gopher)|mailto):(\/\/)?[^ <>\"\t]*|(www|ftp)[0-9]?\\.[-a-z0-9.]+)[^ .,;\t\n\r<\">\\):]?[^, <>\"\t]*[^ .,;\t\n\r<\">\\):](\?[^ \t\n\r]+)?'
PATTERNS[MARKDOWN_URL]='\[[^]]*\]\(([^)]+)\)'

# GROUP: PATHS
PATTERN_GROUPS+=(GR_PATHS)
GR_PATHS=(PATH)
PATTERNS[PATH]='(([.\w\-@~\[\]]+)?(/[.\w\-@\[\]]+)+)'

# GROUP: APPID
PATTERN_GROUPS+=(GR_APPID)
GR_APPID=(APPID)
PATTERNS[APPID]='([[:alnum:]]+\.)+[[:alnum:]]+'

# GROUP: ARGS
PATTERN_GROUPS+=(GR_ARGS)
GR_ARGS=(LONGOPT SHORTOPT)
PATTERNS[LONGOPT]='[[:blank:]]([-][-][-[:alnum:]]+)'
PATTERNS[SHORTOPT]='[[:blank:]]([-][-[:alnum:]]+)'

# GROUP: ADDRS
PATTERN_GROUPS+=(GR_ADDRS)
GR_ADDRS=(IP4 IP6)
PATTERNS[IP4]='\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}'
PATTERNS[IP6]='[A-f0-9:]+:+[A-f0-9:]+[%\w\d]+'

# GROUP: NUMBERS
PATTERN_GROUPS+=(GR_NUMBERS)
GR_NUMBERS=(NUM NUMCHAIN HEXNUM HEXSTR)
PATTERNS[NUM]='[0-9]{4,}'
PATTERNS[NUMCHAIN]='(([0-9]{4,})-)+[0-9]{4,}'
PATTERNS[HEXSTR]='[0-9a-fA-F]{7,128}'
PATTERNS[HEXNUM]='0x[0-9a-fA-F]+'

# GROUP: DIFFS
PATTERN_GROUPS+=(GR_DIFFS)
GR_DIFFS=(DIFF_SUMMARY)
PATTERNS[DIFF_SUMMARY]='diff --git a/([.\w\-@~\[\]]+?/[.\w\-@\[\]]++) b/([.\w\-@~\[\]]+?/[.\w\-@\[\]]++)'

# GROUP: LINES
PATTERN_GROUPS+=(GR_LINES)
GR_LINES=(LINE)
PATTERNS[LINE]='^.*$'

# SPECIAL GROUP: All patterns
PATTERN_GROUPS+=(GR_ALL)
GR_ALL=("${!PATTERNS[@]}")

function match() {
  local pattern="$1"
  local submatch_id="${SUBMATCHES[$pattern]:-0}"

  sortcmd=(sort -b -u -k3 -t$'\x01')

  [[ "$pattern" == LINE ]] && sortcmd=(cat)

  while read -r line; do
    IFS=$':\n' read -r index rest <<< "$line"
    printf "%s\x01%s\x01%s\n" "$index" "$pattern" "$rest"
  done < <(rg -o -r "\$$submatch_id" -P -n "${PATTERNS[$pattern]}" "$INPUT") |
    column -t -s$'\x01' -o$'\x01' | "${sortcmd[@]}"
}

export INPUT="$(mktemp --suffix -extract-$$)"

sed 's/\x1b\[[0-9;]*[mGKF]//g' > "$INPUT"

declare ARG="${1:-GR_ALL}"

declare -n PATS="$ARG"

for gr in "${!PATTERN_GROUPS[@]}"; do
  if [[ "${PATTERN_GROUPS[$gr]}" == "$ARG" ]]; then
    NEXT_PATTERN="${PATTERN_GROUPS[$(( (gr+1) % ${#PATTERN_GROUPS[@]} ))]}"
    PREV_PATTERN="${PATTERN_GROUPS[$(( (gr-1) % ${#PATTERN_GROUPS[@]} ))]}"
    if (( PREV_PATTERN < 0 )); then
      PREV_PATTERN+=$((PREV_PATTERN + ${#PATTERN_GROUPS[@]}))
    fi
  fi
done

for pat in "${PATTERN_GROUPS[@]}"; do
  if [[ "$pat" == "$ARG" ]]; then
    LABELS+=("$(ansi --red "${pat#GR_}")")
  else
    LABELS+=("${pat#GR_}")
  fi
done

for pat in "${PATS[@]}"; do
  match "$pat"
done | column -t -s$'\x01' |
  fzf --ansi --preview-window 'right,60%,wrap,+{1}-5' \
    --border \
    --preview "rg --passthru --color=always -F -- {3..} < $INPUT" \
    --border-label="${LABELS[*]}" \
    --preview-label="${PATS[*]}" \
    --bind="enter:execute(echo -n {3..} | tmux load-buffer -)+accept" \
    --bind="tab:execute(open {3..})" \
    --bind="ctrl-o:execute-silent(open {3..})+accept" \
    --bind="ctrl-n:become(command extract $NEXT_PATTERN < $INPUT 2>/dev/tty)" \
    --bind="ctrl-p:become(command extract $PREV_PATTERN < $INPUT 2>/dev/tty)" \
    --bind="ctrl-e:execute-silent(echo -n {3..} | tmux load-buffer -)+execute-silent(tmux paste-buffer -t $PANE)+accept" \
    --prompt='extract> '

# open
# copy
# reload
# print
# type

exit 0
