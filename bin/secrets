#!/usr/bin/env bash

UTILS="$(dirname "${BASH_SOURCE[0]}")/utils"
BASEDIR="$HOME/.dotfiles"

[[ -r "$UTILS" ]] && source "$UTILS" || exit 1

function enc() {
  gpg -q --yes --pinentry-mode=loopback --symmetric \
    --passphrase-file=<(passphrase) "$@"
}

function dec() {
  gpg -q --yes --pinentry-mode=loopback --decrypt \
    --passphrase-file=<(passphrase) "$@"
}

function passphrase() {
  declare -g PASSPHRASE

  local token="$HOME/.password-store/tokens/main.gpg"

  if [[ -z "$PASSPHRASE" ]]; then
    if [[ -z "$PROMPTPASS" ]]; then
      read -r PASSPHRASE \
        < <(quiet gpg --batch --pinentry-mode=loopback -qd "$token")
    fi

    [[ -z "$PASSPHRASE" ]] && read -r -p 'Passphrase: ' PASSPHRASE
  fi

  [[ -n "$PASSPHRASE" ]] && echo "$PASSPHRASE"
}

function tarformat() {
  COLUMNS=80 sepline '-' "> $TAR_FILENAME <"
  cat -v -
  echo
}

function tarcreate() {
  local src dst

  read -r -a src < <(path "${1?}")
  read -r -a dst < <(path "$2")

  local opts=(
    --create
    --gzip
    --file "${dst:=/dev/stdout}"
    --exclude-vcs-ignores
    --sort=name
  )

  tar "${opts[@]}" -C "${src[1]}" "${src[2]}"
}

function tarextract() {
  local src opts

  read -r -a src < <(path "$1")

  opts=(
    --extract
    --gzip
    --keep-newer-files
    --preserve-permissions
    --no-same-owner
    --file "${src:-/dev/stdin}"
  )

  opts+=("${extra_opts[@]}")

  local errs=(
    '-e' 'is newer or same age'
    '-e' 'Unexpected inconsistency when making directory'
    '-e' 'Exiting with failure status due to previous errors'
  )

  coproc FIXERRORS {
    cat -
  }

  exec 3>&"${FIXERRORS[1]}"
  exec 4>&"${FIXERRORS[0]}"
  exec {FIXERRORS[0]}>&-
  exec {FIXERRORS[1]}>&-

  tar "${opts[@]}" -C "${src[1]:-$PWD}" 2>&3

  exec 3>&-

  grep -v "${errs[@]:2}" <&4 |
    tee >(cat > /dev/stderr) |
      grep -qv "${errs[@]:0:2}"

  if [[ $? -eq 0 ]]; then
    exec 4>&-
    return 1
  fi
  exec 4>&-
  return 0
}

function tarlist() {
  local src

  read -r -a src < <(path "$1")

  local opts=(
    --list
    --gzip
    --verbose
    --file "${src:-/dev/stdin}"
  )

  local lines
  readarray -t lines < <(tar "${opts[@]}")

  COLUMNS=80 sepline '-' '> Archive contents <'
  for line in "${lines[@]}"; do
    local mode ownership size date time path
    read -r mode ownership size date time path <<< "$line"
    echo "$mode $size $path"
  done | column -t
}

function tardump() {
  local extra_opts=(--to-command="${BASH_SOURCE[0]} tarformat")

  coproc DUMP {
     tarextract "$@"
  }

  exec 3>&"${DUMP[1]}"
  exec 4>&"${DUMP[0]}"

  exec {DUMP[1]}>&-
  exec {DUMP[0]}>&-

  cat "${1:-/dev/stdin}" | tee >(tarlist) >&3

  exec 3>&-
  cat <&4
  exec 4>&-
}

function tarpreview() {
  tarcreate "${1?}" | tardump
}

function tardiff() {
  if [[ "${1?}" == *.tar.gz && "${2?}" == *.tar.gz ]]; then
    diff <(quiet tardump "$1") <(quiet tardump "$2")
  elif [[ -d "$1" && -d "$2" ]]; then
    diff <(quiet tarpreview "$1") <(quiet tarpreview "$2")
  fi
}

function secdiff() {
  local dirsrc tarsrc

  dirsrc="$(realpath -sm "${1?}")"
  tarsrc="${2:-${dirsrc}.tar.gz.gpg}"

  diff \
    <(quiet dec --output - "$tarsrc" | quiet tardump) \
    <(quiet tarpreview "$dirsrc")
}

function encsecret() {
  local src="$(realpath -sm "${1?}")"

  if ! mute secdiff "$src"; then
    tarcreate "$src" | enc --output "$src.tar.gz.gpg" -
  fi
}

function decsecret() {
  local src="$(realpath -sm "${1?}")"
  dec --output - "$src" | tarextract
}

function dumpsecret() {
  local src="$(realpath -sm "${1?}")"
  dec --output - "$src" | tardump
}

checkbin git gpg rsync && mkdir -p "$BASEDIR" && "$@"
